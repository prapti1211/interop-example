{"abi":[{"type":"function","name":"computeCreate2Address","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCodeHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"computedAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"computeCreate2Address","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCodeHash","type":"bytes32","internalType":"bytes32"},{"name":"deployer","type":"address","internalType":"address"}],"outputs":[{"name":"computedAddress","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"computeCreate3Address","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"deployer","type":"address","internalType":"address"}],"outputs":[{"name":"computedAddress","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"computeCreate3Address","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"computedAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"computeCreateAddress","inputs":[{"name":"nonce","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"computedAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"computeCreateAddress","inputs":[{"name":"deployer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"computedAddress","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"deployCreate","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCode","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2AndInit","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]},{"name":"refundAddress","type":"address","internalType":"address"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2AndInit","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2AndInit","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]},{"name":"refundAddress","type":"address","internalType":"address"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2AndInit","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2Clone","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"implementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"proxy","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate2Clone","inputs":[{"name":"implementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"proxy","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate3","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate3","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCode","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate3AndInit","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate3AndInit","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate3AndInit","inputs":[{"name":"salt","type":"bytes32","internalType":"bytes32"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]},{"name":"refundAddress","type":"address","internalType":"address"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreate3AndInit","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]},{"name":"refundAddress","type":"address","internalType":"address"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreateAndInit","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreateAndInit","inputs":[{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"values","type":"tuple","internalType":"struct CreateX.Values","components":[{"name":"constructorAmount","type":"uint256","internalType":"uint256"},{"name":"initCallAmount","type":"uint256","internalType":"uint256"}]},{"name":"refundAddress","type":"address","internalType":"address"}],"outputs":[{"name":"newContract","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"function","name":"deployCreateClone","inputs":[{"name":"implementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"proxy","type":"address","internalType":"address"}],"stateMutability":"payable"},{"type":"event","name":"ContractCreation","inputs":[{"name":"newContract","type":"address","indexed":true,"internalType":"address"},{"name":"salt","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"ContractCreation","inputs":[{"name":"newContract","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Create3ProxyContractCreation","inputs":[{"name":"newContract","type":"address","indexed":true,"internalType":"address"},{"name":"salt","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"error","name":"FailedContractCreation","inputs":[{"name":"emitter","type":"address","internalType":"address"}]},{"type":"error","name":"FailedContractInitialisation","inputs":[{"name":"emitter","type":"address","internalType":"address"},{"name":"revertData","type":"bytes","internalType":"bytes"}]},{"type":"error","name":"FailedEtherTransfer","inputs":[{"name":"emitter","type":"address","internalType":"address"},{"name":"revertData","type":"bytes","internalType":"bytes"}]},{"type":"error","name":"InvalidNonceValue","inputs":[{"name":"emitter","type":"address","internalType":"address"}]},{"type":"error","name":"InvalidSalt","inputs":[{"name":"emitter","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f80fd5b5060805161350d6101035f395f81816107b2015281816108d901528181610998015281816109f601528181610d2d01528181610e2801528181610e8801528181610edc01528181610f6d0152818161105c015281816112a40152818161130401528181611358015281816113e9015281816115220152818161170101528181611761015281816117b5015281816118460152818161199f01528181611c0c01528181611d3401528181611e2e01528181611ef30152611fb5015261350d5ff3fe608060405260043610610149575f3560e01c806381503da1116100b5578063d323826a1161006e578063d323826a146104e9578063ddda0acb14610525578063e437252a14610555578063e96deee414610585578063f5745aba146105b5578063f9664498146105e557610149565b806381503da1146103bd578063890c283b146103ed57806398e81077146104295780639c36a28614610459578063a7db93f214610489578063c3fe107b146104b957610149565b80632f990e3f116101075780632f990e3f1461027957806331a7c8c8146102a957806342d654fc146102d95780636cec25361461031557806374637a7a146103515780637f5653601461038d57610149565b8062d84acb1461014d578063263076681461017d57806326a32fc7146101ad57806327fe1822146101dd5780632852527a1461020d57806328ddd0461461023d575b5f80fd5b610167600480360381019061016291906125ff565b610615565b60405161017491906126da565b60405180910390f35b610197600480360381019061019291906126f3565b61062d565b6040516101a491906126da565b60405180910390f35b6101c760048036038101906101c2919061274d565b610699565b6040516101d491906126da565b60405180910390f35b6101f760048036038101906101f2919061274d565b6106b2565b60405161020491906126da565b60405180910390f35b610227600480360381019061022291906127be565b61070e565b60405161023491906126da565b60405180910390f35b348015610248575f80fd5b50610263600480360381019061025e919061282a565b6108d3565b60405161027091906126da565b60405180910390f35b610293600480360381019061028e9190612855565b610905565b6040516102a091906126da565b60405180910390f35b6102c360048036038101906102be9190612855565b610923565b6040516102d091906126da565b60405180910390f35b3480156102e4575f80fd5b506102ff60048036038101906102fa91906128dd565b610939565b60405161030c91906126da565b60405180910390f35b348015610320575f80fd5b5061033b6004803603810190610336919061291b565b610991565b60405161034891906126da565b60405180910390f35b34801561035c575f80fd5b5061037760048036038101906103729190612946565b6109c3565b60405161038491906126da565b60405180910390f35b6103a760048036038101906103a2919061274d565b610cf1565b6040516103b491906126da565b60405180910390f35b6103d760048036038101906103d29190612984565b610d0a565b6040516103e491906126da565b60405180910390f35b3480156103f8575f80fd5b50610413600480360381019061040e91906129de565b610d25565b60405161042091906126da565b60405180910390f35b610443600480360381019061043e9190612a1c565b610d59565b60405161045091906126da565b60405180910390f35b610473600480360381019061046e91906126f3565b610fd5565b60405161048091906126da565b60405180910390f35b6104a3600480360381019061049e9190612ab8565b6111c7565b6040516104b091906126da565b60405180910390f35b6104d360048036038101906104ce9190612855565b611453565b6040516104e091906126da565b60405180910390f35b3480156104f4575f80fd5b5061050f600480360381019061050a9190612b67565b611471565b60405161051c91906126da565b60405180910390f35b61053f600480360381019061053a9190612ab8565b61149b565b60405161054c91906126da565b60405180910390f35b61056f600480360381019061056a9190612a1c565b6118b2565b60405161057c91906126da565b60405180910390f35b61059f600480360381019061059a91906125ff565b6118d1565b6040516105ac91906126da565b60405180910390f35b6105cf60048036038101906105ca9190612a1c565b6118e9565b6040516105dc91906126da565b60405180910390f35b6105ff60048036038101906105fa9190612984565b611908565b60405161060c91906126da565b60405180910390f35b5f610623858585853361149b565b9050949350505050565b5f8061063884611abd565b90508083516020850134f5915061064e82611dd7565b808273ffffffffffffffffffffffffffffffffffffffff167fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f760405160405180910390a35092915050565b5f6106ab6106a5611e8c565b8361062d565b9050919050565b5f81516020830134f090506106c681611dd7565b8073ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a2919050565b5f8061071985611abd565b90505f8460601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037825ff59350505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361080d577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a00000000000000000000000000000000000000000000000000000000815260040161080491906126da565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff167fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f760405160405180910390a35f808473ffffffffffffffffffffffffffffffffffffffff1634876040516108799190612c23565b5f6040518083038185875af1925050503d805f81146108b3576040519150601f19603f3d011682016040523d82523d5f602084013e6108b8565b606091505b50915091506108c8828289611ec9565b505050509392505050565b5f6108fe7f0000000000000000000000000000000000000000000000000000000000000000836109c3565b9050919050565b5f61091a610911611e8c565b8585853361149b565b90509392505050565b5f61093084848433610d59565b90509392505050565b5f604051825f5260ff600b53836020527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6040526055600b206014528060405261d6945f5260016034536017601e2091505092915050565b5f6109bc827f0000000000000000000000000000000000000000000000000000000000000000610939565b9050919050565b5f60605f609460f81b9050600167ffffffffffffffff6109e39190612c79565b67ffffffffffffffff16841115610a51577f00000000000000000000000000000000000000000000000000000000000000006040517f3c55ab3b000000000000000000000000000000000000000000000000000000008152600401610a4891906126da565b60405180910390fd5b5f8403610a8d5760d660f81b8186608060f81b604051602001610a779493929190612d44565b6040516020818303038152906040529150610cdd565b607f8411610ac65760d660f81b818686604051602001610ab09493929190612dd1565b6040516020818303038152906040529150610cdc565b60ff80168411610b075760d760f81b8186608160f81b87604051602001610af1959493929190612e1e565b6040516020818303038152906040529150610cdb565b61ffff80168411610b495760d860f81b8186608260f81b87604051602001610b33959493929190612ebd565b6040516020818303038152906040529150610cda565b62ffffff80168411610b8c5760d960f81b8186608360f81b87604051602001610b76959493929190612f5d565b6040516020818303038152906040529150610cd9565b63ffffffff80168411610bd05760da60f81b8186608460f81b87604051602001610bba959493929190612ffe565b6040516020818303038152906040529150610cd8565b64ffffffffff80168411610c155760db60f81b8186608560f81b87604051602001610bff9594939291906130a0565b6040516020818303038152906040529150610cd7565b65ffffffffffff80168411610c5b5760dc60f81b8186608660f81b87604051602001610c45959493929190613143565b6040516020818303038152906040529150610cd6565b66ffffffffffffff80168411610ca25760dd60f81b8186608760f81b87604051602001610c8c9594939291906131e7565b6040516020818303038152906040529150610cd5565b60de60f81b8186608860f81b87604051602001610cc3959493929190613279565b60405160208183030381529060405291505b5b5b5b5b5b5b5b5b81805190602001205f1c9250505092915050565b5f610d03610cfd611e8c565b83610fd5565b9050919050565b5f610d1d610d16611e8c565b848461070e565b905092915050565b5f610d5183837f0000000000000000000000000000000000000000000000000000000000000000611471565b905092915050565b5f8451602086018451f09050610d6e81611dd7565b8073ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a25f808273ffffffffffffffffffffffffffffffffffffffff16856020015187604051610ddd9190612c23565b5f6040518083038185875af1925050503d805f8114610e17576040519150601f19603f3d011682016040523d82523d5f602084013e610e1c565b606091505b509150915081610e85577f0000000000000000000000000000000000000000000000000000000000000000816040517fa57ca239000000000000000000000000000000000000000000000000000000008152600401610e7c92919061331f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163114610fcb578373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1631604051610f1e90613370565b5f6040518083038185875af1925050503d805f8114610f58576040519150601f19603f3d011682016040523d82523d5f602084013e610f5d565b606091505b50809250819350505081610fca577f0000000000000000000000000000000000000000000000000000000000000000816040517fc2b3f445000000000000000000000000000000000000000000000000000000008152600401610fc192919061331f565b60405180910390fd5b5b5050949350505050565b5f80610fe084611abd565b90505f6040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090505f828251602084015ff590505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110b7577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a0000000000000000000000000000000000000000000000000000000081526004016110ae91906126da565b60405180910390fd5b828173ffffffffffffffffffffffffffffffffffffffff167f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c906760405160405180910390a361110483610991565b93505f8173ffffffffffffffffffffffffffffffffffffffff16348760405161112d9190612c23565b5f6040518083038185875af1925050503d805f8114611167576040519150601f19603f3d011682016040523d82523d5f602084013e61116c565b606091505b5050905061117a8186611f55565b8473ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a25050505092915050565b5f806111d287611abd565b9050808651602088018651f591506111e982611dd7565b808273ffffffffffffffffffffffffffffffffffffffff167fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f760405160405180910390a35f808373ffffffffffffffffffffffffffffffffffffffff168660200151886040516112599190612c23565b5f6040518083038185875af1925050503d805f8114611293576040519150601f19603f3d011682016040523d82523d5f602084013e611298565b606091505b509150915081611301577f0000000000000000000000000000000000000000000000000000000000000000816040517fa57ca2390000000000000000000000000000000000000000000000000000000081526004016112f892919061331f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163114611447578473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163160405161139a90613370565b5f6040518083038185875af1925050503d805f81146113d4576040519150601f19603f3d011682016040523d82523d5f602084013e6113d9565b606091505b50809250819350505081611446577f0000000000000000000000000000000000000000000000000000000000000000816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161143d92919061331f565b60405180910390fd5b5b50505095945050505050565b5f61146861145f611e8c565b858585336111c7565b90509392505050565b5f604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b5f806114a687611abd565b90505f6040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090505f828251602084015ff590505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361157d577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a00000000000000000000000000000000000000000000000000000000815260040161157491906126da565b60405180910390fd5b828173ffffffffffffffffffffffffffffffffffffffff167f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c906760405160405180910390a36115ca83610991565b93505f8173ffffffffffffffffffffffffffffffffffffffff16875f01518a6040516115f69190612c23565b5f6040518083038185875af1925050503d805f8114611630576040519150601f19603f3d011682016040523d82523d5f602084013e611635565b606091505b505090506116438186611f55565b8473ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a260608573ffffffffffffffffffffffffffffffffffffffff1688602001518a6040516116b29190612c23565b5f6040518083038185875af1925050503d805f81146116ec576040519150601f19603f3d011682016040523d82523d5f602084013e6116f1565b606091505b5080925081935050508161175e577f0000000000000000000000000000000000000000000000000000000000000000816040517fa57ca23900000000000000000000000000000000000000000000000000000000815260040161175592919061331f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1631146118a4578673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16316040516117f790613370565b5f6040518083038185875af1925050503d805f8114611831576040519150601f19603f3d011682016040523d82523d5f602084013e611836565b606091505b508092508193505050816118a3577f0000000000000000000000000000000000000000000000000000000000000000816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161189a92919061331f565b60405180910390fd5b5b505050505095945050505050565b5f6118c76118be611e8c565b868686866111c7565b9050949350505050565b5f6118df85858585336111c7565b9050949350505050565b5f6118fe6118f5611e8c565b8686868661149b565b9050949350505050565b5f808360601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037815ff09250505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119fa577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a0000000000000000000000000000000000000000000000000000000081526004016119f191906126da565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a25f808373ffffffffffffffffffffffffffffffffffffffff163486604051611a659190612c23565b5f6040518083038185875af1925050503d805f8114611a9f576040519150601f19603f3d011682016040523d82523d5f602084013e611aa4565b606091505b5091509150611ab4828288611ec9565b50505092915050565b5f805f611ac984612014565b915091505f6002811115611ae057611adf613384565b5b826002811115611af357611af2613384565b5b148015611b2357505f6002811115611b0e57611b0d613384565b5b816002811115611b2157611b20613384565b5b145b15611b5a57334685604051602001611b3d939291906133cf565b604051602081830303815290604052805190602001209250611dd0565b5f6002811115611b6d57611b6c613384565b5b826002811115611b8057611b7f613384565b5b148015611bb1575060016002811115611b9c57611b9b613384565b5b816002811115611baf57611bae613384565b5b145b15611bdf57611bd83373ffffffffffffffffffffffffffffffffffffffff165f1b856123e7565b9250611dcf565b5f6002811115611bf257611bf1613384565b5b826002811115611c0557611c04613384565b5b03611c67577f00000000000000000000000000000000000000000000000000000000000000006040517f13b3a2a1000000000000000000000000000000000000000000000000000000008152600401611c5e91906126da565b60405180910390fd5b60016002811115611c7b57611c7a613384565b5b826002811115611c8e57611c8d613384565b5b148015611cbe57505f6002811115611ca957611ca8613384565b5b816002811115611cbc57611cbb613384565b5b145b15611cd657611ccf465f1b856123e7565b9250611dce565b60016002811115611cea57611ce9613384565b5b826002811115611cfd57611cfc613384565b5b148015611d2d5750600280811115611d1857611d17613384565b5b816002811115611d2b57611d2a613384565b5b145b15611d8f577f00000000000000000000000000000000000000000000000000000000000000006040517f13b3a2a1000000000000000000000000000000000000000000000000000000008152600401611d8691906126da565b60405180910390fd5b611d97611e8c565b8403611da35783611dcb565b83604051602001611db49190613404565b604051602081830303815290604052805190602001205b92505b5b5b5050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611e2757505f8173ffffffffffffffffffffffffffffffffffffffff163b145b15611e89577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a000000000000000000000000000000000000000000000000000000008152600401611e8091906126da565b60405180910390fd5b50565b5f6020430340414342444633604051602001611eae979695949392919061343d565b60405160208183030381529060405280519060200120905090565b821580611eec57505f8173ffffffffffffffffffffffffffffffffffffffff163b145b15611f50577f0000000000000000000000000000000000000000000000000000000000000000826040517fa57ca239000000000000000000000000000000000000000000000000000000008152600401611f4792919061331f565b60405180910390fd5b505050565b811580611f8d57505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80611fae57505f8173ffffffffffffffffffffffffffffffffffffffff163b145b15612010577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a00000000000000000000000000000000000000000000000000000000815260040161200791906126da565b60405180910390fd5b5050565b5f803373ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff161480156120ac57507f010000000000000000000000000000000000000000000000000000000000000083601460208110612084576120836134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156120c0575f8080925081935050506123e2565b3373ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff1614801561213657505f8360146020811061210e5761210d6134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561214b575f600180925081935050506123e1565b3373ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff1603612191575f600280925081935050506123e0565b5f73ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff1614801561222757507f0100000000000000000000000000000000000000000000000000000000000000836014602081106121ff576121fe6134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561223c5760015f80925081935050506123df565b5f73ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff161480156122b257505f8360146020811061228a576122896134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156122c75760018080925081935050506123de565b5f73ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff160361230e576001600280925081935050506123dd565b7f010000000000000000000000000000000000000000000000000000000000000083601460208110612343576123426134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361237e5760025f80925081935050506123dc565b5f83601460208110612393576123926134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036123cf576002600180925081935050506123db565b60028080925081935050505b5b5b5b5b5b5b5b915091565b5f825f528160205260405f20905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61241e8161240c565b8114612428575f80fd5b50565b5f8135905061243981612415565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61248d82612447565b810181811067ffffffffffffffff821117156124ac576124ab612457565b5b80604052505050565b5f6124be6123fb565b90506124ca8282612484565b919050565b5f67ffffffffffffffff8211156124e9576124e8612457565b5b6124f282612447565b9050602081019050919050565b828183375f83830152505050565b5f61251f61251a846124cf565b6124b5565b90508281526020810184848401111561253b5761253a612443565b5b6125468482856124ff565b509392505050565b5f82601f8301126125625761256161243f565b5b813561257284826020860161250d565b91505092915050565b5f80fd5b5f819050919050565b6125918161257f565b811461259b575f80fd5b50565b5f813590506125ac81612588565b92915050565b5f604082840312156125c7576125c661257b565b5b6125d160406124b5565b90505f6125e08482850161259e565b5f8301525060206125f38482850161259e565b60208301525092915050565b5f805f8060a0858703121561261757612616612404565b5b5f6126248782880161242b565b945050602085013567ffffffffffffffff81111561264557612644612408565b5b6126518782880161254e565b935050604085013567ffffffffffffffff81111561267257612671612408565b5b61267e8782880161254e565b925050606061268f878288016125b2565b91505092959194509250565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6126c48261269b565b9050919050565b6126d4816126ba565b82525050565b5f6020820190506126ed5f8301846126cb565b92915050565b5f806040838503121561270957612708612404565b5b5f6127168582860161242b565b925050602083013567ffffffffffffffff81111561273757612736612408565b5b6127438582860161254e565b9150509250929050565b5f6020828403121561276257612761612404565b5b5f82013567ffffffffffffffff81111561277f5761277e612408565b5b61278b8482850161254e565b91505092915050565b61279d816126ba565b81146127a7575f80fd5b50565b5f813590506127b881612794565b92915050565b5f805f606084860312156127d5576127d4612404565b5b5f6127e28682870161242b565b93505060206127f3868287016127aa565b925050604084013567ffffffffffffffff81111561281457612813612408565b5b6128208682870161254e565b9150509250925092565b5f6020828403121561283f5761283e612404565b5b5f61284c8482850161259e565b91505092915050565b5f805f6080848603121561286c5761286b612404565b5b5f84013567ffffffffffffffff81111561288957612888612408565b5b6128958682870161254e565b935050602084013567ffffffffffffffff8111156128b6576128b5612408565b5b6128c28682870161254e565b92505060406128d3868287016125b2565b9150509250925092565b5f80604083850312156128f3576128f2612404565b5b5f6129008582860161242b565b9250506020612911858286016127aa565b9150509250929050565b5f602082840312156129305761292f612404565b5b5f61293d8482850161242b565b91505092915050565b5f806040838503121561295c5761295b612404565b5b5f612969858286016127aa565b925050602061297a8582860161259e565b9150509250929050565b5f806040838503121561299a57612999612404565b5b5f6129a7858286016127aa565b925050602083013567ffffffffffffffff8111156129c8576129c7612408565b5b6129d48582860161254e565b9150509250929050565b5f80604083850312156129f4576129f3612404565b5b5f612a018582860161242b565b9250506020612a128582860161242b565b9150509250929050565b5f805f8060a08587031215612a3457612a33612404565b5b5f85013567ffffffffffffffff811115612a5157612a50612408565b5b612a5d8782880161254e565b945050602085013567ffffffffffffffff811115612a7e57612a7d612408565b5b612a8a8782880161254e565b9350506040612a9b878288016125b2565b9250506080612aac878288016127aa565b91505092959194509250565b5f805f805f60c08688031215612ad157612ad0612404565b5b5f612ade8882890161242b565b955050602086013567ffffffffffffffff811115612aff57612afe612408565b5b612b0b8882890161254e565b945050604086013567ffffffffffffffff811115612b2c57612b2b612408565b5b612b388882890161254e565b9350506060612b49888289016125b2565b92505060a0612b5a888289016127aa565b9150509295509295909350565b5f805f60608486031215612b7e57612b7d612404565b5b5f612b8b8682870161242b565b9350506020612b9c8682870161242b565b9250506040612bad868287016127aa565b9150509250925092565b5f81519050919050565b5f81905092915050565b5f5b83811015612be8578082015181840152602081019050612bcd565b5f8484015250505050565b5f612bfd82612bb7565b612c078185612bc1565b9350612c17818560208601612bcb565b80840191505092915050565b5f612c2e8284612bf3565b915081905092915050565b5f67ffffffffffffffff82169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612c8382612c39565b9150612c8e83612c39565b9250828203905067ffffffffffffffff811115612cae57612cad612c4c565b5b92915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b612cf9612cf482612cb4565b612cdf565b82525050565b5f8160601b9050919050565b5f612d1582612cff565b9050919050565b5f612d2682612d0b565b9050919050565b612d3e612d39826126ba565b612d1c565b82525050565b5f612d4f8287612ce8565b600182019150612d5f8286612ce8565b600182019150612d6f8285612d2d565b601482019150612d7f8284612ce8565b60018201915081905095945050505050565b5f60ff82169050919050565b5f8160f81b9050919050565b5f612db382612d9d565b9050919050565b612dcb612dc682612d91565b612da9565b82525050565b5f612ddc8287612ce8565b600182019150612dec8286612ce8565b600182019150612dfc8285612d2d565b601482019150612e0c8284612dba565b60018201915081905095945050505050565b5f612e298288612ce8565b600182019150612e398287612ce8565b600182019150612e498286612d2d565b601482019150612e598285612ce8565b600182019150612e698284612dba565b6001820191508190509695505050505050565b5f61ffff82169050919050565b5f8160f01b9050919050565b5f612e9f82612e89565b9050919050565b612eb7612eb282612e7c565b612e95565b82525050565b5f612ec88288612ce8565b600182019150612ed88287612ce8565b600182019150612ee88286612d2d565b601482019150612ef88285612ce8565b600182019150612f088284612ea6565b6002820191508190509695505050505050565b5f62ffffff82169050919050565b5f8160e81b9050919050565b5f612f3f82612f29565b9050919050565b612f57612f5282612f1b565b612f35565b82525050565b5f612f688288612ce8565b600182019150612f788287612ce8565b600182019150612f888286612d2d565b601482019150612f988285612ce8565b600182019150612fa88284612f46565b6003820191508190509695505050505050565b5f63ffffffff82169050919050565b5f8160e01b9050919050565b5f612fe082612fca565b9050919050565b612ff8612ff382612fbb565b612fd6565b82525050565b5f6130098288612ce8565b6001820191506130198287612ce8565b6001820191506130298286612d2d565b6014820191506130398285612ce8565b6001820191506130498284612fe7565b6004820191508190509695505050505050565b5f64ffffffffff82169050919050565b5f8160d81b9050919050565b5f6130828261306c565b9050919050565b61309a6130958261305c565b613078565b82525050565b5f6130ab8288612ce8565b6001820191506130bb8287612ce8565b6001820191506130cb8286612d2d565b6014820191506130db8285612ce8565b6001820191506130eb8284613089565b6005820191508190509695505050505050565b5f65ffffffffffff82169050919050565b5f8160d01b9050919050565b5f6131258261310f565b9050919050565b61313d613138826130fe565b61311b565b82525050565b5f61314e8288612ce8565b60018201915061315e8287612ce8565b60018201915061316e8286612d2d565b60148201915061317e8285612ce8565b60018201915061318e828461312c565b6006820191508190509695505050505050565b5f66ffffffffffffff82169050919050565b5f8160c81b9050919050565b5f6131c9826131b3565b9050919050565b6131e16131dc826131a1565b6131bf565b82525050565b5f6131f28288612ce8565b6001820191506132028287612ce8565b6001820191506132128286612d2d565b6014820191506132228285612ce8565b60018201915061323282846131d0565b6007820191508190509695505050505050565b5f8160c01b9050919050565b5f61325b82613245565b9050919050565b61327361326e82612c39565b613251565b82525050565b5f6132848288612ce8565b6001820191506132948287612ce8565b6001820191506132a48286612d2d565b6014820191506132b48285612ce8565b6001820191506132c48284613262565b6008820191508190509695505050505050565b5f82825260208201905092915050565b5f6132f182612bb7565b6132fb81856132d7565b935061330b818560208601612bcb565b61331481612447565b840191505092915050565b5f6040820190506133325f8301856126cb565b818103602083015261334481846132e7565b90509392505050565b50565b5f61335b5f83612bc1565b91506133668261334d565b5f82019050919050565b5f61337a82613350565b9150819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6133ba8161257f565b82525050565b6133c98161240c565b82525050565b5f6060820190506133e25f8301866126cb565b6133ef60208301856133b1565b6133fc60408301846133c0565b949350505050565b5f6020820190506134175f8301846133c0565b92915050565b5f6134278261269b565b9050919050565b6134378161341d565b82525050565b5f60e0820190506134505f83018a6133c0565b61345d602083018961342e565b61346a60408301886133b1565b61347760608301876133b1565b61348460808301866133b1565b61349160a08301856133b1565b61349e60c08301846126cb565b98975050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea264697066735822122003ceca7a7c2a5be0d3b43f1e100996af2e5f781db62edc0550ca13412a361c4364736f6c63430008170033","sourceMap":"1176:58382:0:-:0;;;1632:4;1589:48;;;;;;;;;1176:58382;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405260043610610149575f3560e01c806381503da1116100b5578063d323826a1161006e578063d323826a146104e9578063ddda0acb14610525578063e437252a14610555578063e96deee414610585578063f5745aba146105b5578063f9664498146105e557610149565b806381503da1146103bd578063890c283b146103ed57806398e81077146104295780639c36a28614610459578063a7db93f214610489578063c3fe107b146104b957610149565b80632f990e3f116101075780632f990e3f1461027957806331a7c8c8146102a957806342d654fc146102d95780636cec25361461031557806374637a7a146103515780637f5653601461038d57610149565b8062d84acb1461014d578063263076681461017d57806326a32fc7146101ad57806327fe1822146101dd5780632852527a1461020d57806328ddd0461461023d575b5f80fd5b610167600480360381019061016291906125ff565b610615565b60405161017491906126da565b60405180910390f35b610197600480360381019061019291906126f3565b61062d565b6040516101a491906126da565b60405180910390f35b6101c760048036038101906101c2919061274d565b610699565b6040516101d491906126da565b60405180910390f35b6101f760048036038101906101f2919061274d565b6106b2565b60405161020491906126da565b60405180910390f35b610227600480360381019061022291906127be565b61070e565b60405161023491906126da565b60405180910390f35b348015610248575f80fd5b50610263600480360381019061025e919061282a565b6108d3565b60405161027091906126da565b60405180910390f35b610293600480360381019061028e9190612855565b610905565b6040516102a091906126da565b60405180910390f35b6102c360048036038101906102be9190612855565b610923565b6040516102d091906126da565b60405180910390f35b3480156102e4575f80fd5b506102ff60048036038101906102fa91906128dd565b610939565b60405161030c91906126da565b60405180910390f35b348015610320575f80fd5b5061033b6004803603810190610336919061291b565b610991565b60405161034891906126da565b60405180910390f35b34801561035c575f80fd5b5061037760048036038101906103729190612946565b6109c3565b60405161038491906126da565b60405180910390f35b6103a760048036038101906103a2919061274d565b610cf1565b6040516103b491906126da565b60405180910390f35b6103d760048036038101906103d29190612984565b610d0a565b6040516103e491906126da565b60405180910390f35b3480156103f8575f80fd5b50610413600480360381019061040e91906129de565b610d25565b60405161042091906126da565b60405180910390f35b610443600480360381019061043e9190612a1c565b610d59565b60405161045091906126da565b60405180910390f35b610473600480360381019061046e91906126f3565b610fd5565b60405161048091906126da565b60405180910390f35b6104a3600480360381019061049e9190612ab8565b6111c7565b6040516104b091906126da565b60405180910390f35b6104d360048036038101906104ce9190612855565b611453565b6040516104e091906126da565b60405180910390f35b3480156104f4575f80fd5b5061050f600480360381019061050a9190612b67565b611471565b60405161051c91906126da565b60405180910390f35b61053f600480360381019061053a9190612ab8565b61149b565b60405161054c91906126da565b60405180910390f35b61056f600480360381019061056a9190612a1c565b6118b2565b60405161057c91906126da565b60405180910390f35b61059f600480360381019061059a91906125ff565b6118d1565b6040516105ac91906126da565b60405180910390f35b6105cf60048036038101906105ca9190612a1c565b6118e9565b6040516105dc91906126da565b60405180910390f35b6105ff60048036038101906105fa9190612984565b611908565b60405161060c91906126da565b60405180910390f35b5f610623858585853361149b565b9050949350505050565b5f8061063884611abd565b90508083516020850134f5915061064e82611dd7565b808273ffffffffffffffffffffffffffffffffffffffff167fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f760405160405180910390a35092915050565b5f6106ab6106a5611e8c565b8361062d565b9050919050565b5f81516020830134f090506106c681611dd7565b8073ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a2919050565b5f8061071985611abd565b90505f8460601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037825ff59350505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361080d577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a00000000000000000000000000000000000000000000000000000000815260040161080491906126da565b60405180910390fd5b818373ffffffffffffffffffffffffffffffffffffffff167fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f760405160405180910390a35f808473ffffffffffffffffffffffffffffffffffffffff1634876040516108799190612c23565b5f6040518083038185875af1925050503d805f81146108b3576040519150601f19603f3d011682016040523d82523d5f602084013e6108b8565b606091505b50915091506108c8828289611ec9565b505050509392505050565b5f6108fe7f0000000000000000000000000000000000000000000000000000000000000000836109c3565b9050919050565b5f61091a610911611e8c565b8585853361149b565b90509392505050565b5f61093084848433610d59565b90509392505050565b5f604051825f5260ff600b53836020527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6040526055600b206014528060405261d6945f5260016034536017601e2091505092915050565b5f6109bc827f0000000000000000000000000000000000000000000000000000000000000000610939565b9050919050565b5f60605f609460f81b9050600167ffffffffffffffff6109e39190612c79565b67ffffffffffffffff16841115610a51577f00000000000000000000000000000000000000000000000000000000000000006040517f3c55ab3b000000000000000000000000000000000000000000000000000000008152600401610a4891906126da565b60405180910390fd5b5f8403610a8d5760d660f81b8186608060f81b604051602001610a779493929190612d44565b6040516020818303038152906040529150610cdd565b607f8411610ac65760d660f81b818686604051602001610ab09493929190612dd1565b6040516020818303038152906040529150610cdc565b60ff80168411610b075760d760f81b8186608160f81b87604051602001610af1959493929190612e1e565b6040516020818303038152906040529150610cdb565b61ffff80168411610b495760d860f81b8186608260f81b87604051602001610b33959493929190612ebd565b6040516020818303038152906040529150610cda565b62ffffff80168411610b8c5760d960f81b8186608360f81b87604051602001610b76959493929190612f5d565b6040516020818303038152906040529150610cd9565b63ffffffff80168411610bd05760da60f81b8186608460f81b87604051602001610bba959493929190612ffe565b6040516020818303038152906040529150610cd8565b64ffffffffff80168411610c155760db60f81b8186608560f81b87604051602001610bff9594939291906130a0565b6040516020818303038152906040529150610cd7565b65ffffffffffff80168411610c5b5760dc60f81b8186608660f81b87604051602001610c45959493929190613143565b6040516020818303038152906040529150610cd6565b66ffffffffffffff80168411610ca25760dd60f81b8186608760f81b87604051602001610c8c9594939291906131e7565b6040516020818303038152906040529150610cd5565b60de60f81b8186608860f81b87604051602001610cc3959493929190613279565b60405160208183030381529060405291505b5b5b5b5b5b5b5b5b81805190602001205f1c9250505092915050565b5f610d03610cfd611e8c565b83610fd5565b9050919050565b5f610d1d610d16611e8c565b848461070e565b905092915050565b5f610d5183837f0000000000000000000000000000000000000000000000000000000000000000611471565b905092915050565b5f8451602086018451f09050610d6e81611dd7565b8073ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a25f808273ffffffffffffffffffffffffffffffffffffffff16856020015187604051610ddd9190612c23565b5f6040518083038185875af1925050503d805f8114610e17576040519150601f19603f3d011682016040523d82523d5f602084013e610e1c565b606091505b509150915081610e85577f0000000000000000000000000000000000000000000000000000000000000000816040517fa57ca239000000000000000000000000000000000000000000000000000000008152600401610e7c92919061331f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163114610fcb578373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1631604051610f1e90613370565b5f6040518083038185875af1925050503d805f8114610f58576040519150601f19603f3d011682016040523d82523d5f602084013e610f5d565b606091505b50809250819350505081610fca577f0000000000000000000000000000000000000000000000000000000000000000816040517fc2b3f445000000000000000000000000000000000000000000000000000000008152600401610fc192919061331f565b60405180910390fd5b5b5050949350505050565b5f80610fe084611abd565b90505f6040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090505f828251602084015ff590505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110b7577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a0000000000000000000000000000000000000000000000000000000081526004016110ae91906126da565b60405180910390fd5b828173ffffffffffffffffffffffffffffffffffffffff167f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c906760405160405180910390a361110483610991565b93505f8173ffffffffffffffffffffffffffffffffffffffff16348760405161112d9190612c23565b5f6040518083038185875af1925050503d805f8114611167576040519150601f19603f3d011682016040523d82523d5f602084013e61116c565b606091505b5050905061117a8186611f55565b8473ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a25050505092915050565b5f806111d287611abd565b9050808651602088018651f591506111e982611dd7565b808273ffffffffffffffffffffffffffffffffffffffff167fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f760405160405180910390a35f808373ffffffffffffffffffffffffffffffffffffffff168660200151886040516112599190612c23565b5f6040518083038185875af1925050503d805f8114611293576040519150601f19603f3d011682016040523d82523d5f602084013e611298565b606091505b509150915081611301577f0000000000000000000000000000000000000000000000000000000000000000816040517fa57ca2390000000000000000000000000000000000000000000000000000000081526004016112f892919061331f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163114611447578473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163160405161139a90613370565b5f6040518083038185875af1925050503d805f81146113d4576040519150601f19603f3d011682016040523d82523d5f602084013e6113d9565b606091505b50809250819350505081611446577f0000000000000000000000000000000000000000000000000000000000000000816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161143d92919061331f565b60405180910390fd5b5b50505095945050505050565b5f61146861145f611e8c565b858585336111c7565b90509392505050565b5f604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b5f806114a687611abd565b90505f6040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090505f828251602084015ff590505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361157d577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a00000000000000000000000000000000000000000000000000000000815260040161157491906126da565b60405180910390fd5b828173ffffffffffffffffffffffffffffffffffffffff167f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c906760405160405180910390a36115ca83610991565b93505f8173ffffffffffffffffffffffffffffffffffffffff16875f01518a6040516115f69190612c23565b5f6040518083038185875af1925050503d805f8114611630576040519150601f19603f3d011682016040523d82523d5f602084013e611635565b606091505b505090506116438186611f55565b8473ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a260608573ffffffffffffffffffffffffffffffffffffffff1688602001518a6040516116b29190612c23565b5f6040518083038185875af1925050503d805f81146116ec576040519150601f19603f3d011682016040523d82523d5f602084013e6116f1565b606091505b5080925081935050508161175e577f0000000000000000000000000000000000000000000000000000000000000000816040517fa57ca23900000000000000000000000000000000000000000000000000000000815260040161175592919061331f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1631146118a4578673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16316040516117f790613370565b5f6040518083038185875af1925050503d805f8114611831576040519150601f19603f3d011682016040523d82523d5f602084013e611836565b606091505b508092508193505050816118a3577f0000000000000000000000000000000000000000000000000000000000000000816040517fc2b3f44500000000000000000000000000000000000000000000000000000000815260040161189a92919061331f565b60405180910390fd5b5b505050505095945050505050565b5f6118c76118be611e8c565b868686866111c7565b9050949350505050565b5f6118df85858585336111c7565b9050949350505050565b5f6118fe6118f5611e8c565b8686868661149b565b9050949350505050565b5f808360601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037815ff09250505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119fa577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a0000000000000000000000000000000000000000000000000000000081526004016119f191906126da565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b51160405160405180910390a25f808373ffffffffffffffffffffffffffffffffffffffff163486604051611a659190612c23565b5f6040518083038185875af1925050503d805f8114611a9f576040519150601f19603f3d011682016040523d82523d5f602084013e611aa4565b606091505b5091509150611ab4828288611ec9565b50505092915050565b5f805f611ac984612014565b915091505f6002811115611ae057611adf613384565b5b826002811115611af357611af2613384565b5b148015611b2357505f6002811115611b0e57611b0d613384565b5b816002811115611b2157611b20613384565b5b145b15611b5a57334685604051602001611b3d939291906133cf565b604051602081830303815290604052805190602001209250611dd0565b5f6002811115611b6d57611b6c613384565b5b826002811115611b8057611b7f613384565b5b148015611bb1575060016002811115611b9c57611b9b613384565b5b816002811115611baf57611bae613384565b5b145b15611bdf57611bd83373ffffffffffffffffffffffffffffffffffffffff165f1b856123e7565b9250611dcf565b5f6002811115611bf257611bf1613384565b5b826002811115611c0557611c04613384565b5b03611c67577f00000000000000000000000000000000000000000000000000000000000000006040517f13b3a2a1000000000000000000000000000000000000000000000000000000008152600401611c5e91906126da565b60405180910390fd5b60016002811115611c7b57611c7a613384565b5b826002811115611c8e57611c8d613384565b5b148015611cbe57505f6002811115611ca957611ca8613384565b5b816002811115611cbc57611cbb613384565b5b145b15611cd657611ccf465f1b856123e7565b9250611dce565b60016002811115611cea57611ce9613384565b5b826002811115611cfd57611cfc613384565b5b148015611d2d5750600280811115611d1857611d17613384565b5b816002811115611d2b57611d2a613384565b5b145b15611d8f577f00000000000000000000000000000000000000000000000000000000000000006040517f13b3a2a1000000000000000000000000000000000000000000000000000000008152600401611d8691906126da565b60405180910390fd5b611d97611e8c565b8403611da35783611dcb565b83604051602001611db49190613404565b604051602081830303815290604052805190602001205b92505b5b5b5050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611e2757505f8173ffffffffffffffffffffffffffffffffffffffff163b145b15611e89577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a000000000000000000000000000000000000000000000000000000008152600401611e8091906126da565b60405180910390fd5b50565b5f6020430340414342444633604051602001611eae979695949392919061343d565b60405160208183030381529060405280519060200120905090565b821580611eec57505f8173ffffffffffffffffffffffffffffffffffffffff163b145b15611f50577f0000000000000000000000000000000000000000000000000000000000000000826040517fa57ca239000000000000000000000000000000000000000000000000000000008152600401611f4792919061331f565b60405180910390fd5b505050565b811580611f8d57505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80611fae57505f8173ffffffffffffffffffffffffffffffffffffffff163b145b15612010577f00000000000000000000000000000000000000000000000000000000000000006040517fc05cee7a00000000000000000000000000000000000000000000000000000000815260040161200791906126da565b60405180910390fd5b5050565b5f803373ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff161480156120ac57507f010000000000000000000000000000000000000000000000000000000000000083601460208110612084576120836134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156120c0575f8080925081935050506123e2565b3373ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff1614801561213657505f8360146020811061210e5761210d6134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561214b575f600180925081935050506123e1565b3373ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff1603612191575f600280925081935050506123e0565b5f73ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff1614801561222757507f0100000000000000000000000000000000000000000000000000000000000000836014602081106121ff576121fe6134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561223c5760015f80925081935050506123df565b5f73ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff161480156122b257505f8360146020811061228a576122896134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156122c75760018080925081935050506123de565b5f73ffffffffffffffffffffffffffffffffffffffff168360601c73ffffffffffffffffffffffffffffffffffffffff160361230e576001600280925081935050506123dd565b7f010000000000000000000000000000000000000000000000000000000000000083601460208110612343576123426134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361237e5760025f80925081935050506123dc565b5f83601460208110612393576123926134aa565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036123cf576002600180925081935050506123db565b60028080925081935050505b5b5b5b5b5b5b5b915091565b5f825f528160205260405f20905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61241e8161240c565b8114612428575f80fd5b50565b5f8135905061243981612415565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61248d82612447565b810181811067ffffffffffffffff821117156124ac576124ab612457565b5b80604052505050565b5f6124be6123fb565b90506124ca8282612484565b919050565b5f67ffffffffffffffff8211156124e9576124e8612457565b5b6124f282612447565b9050602081019050919050565b828183375f83830152505050565b5f61251f61251a846124cf565b6124b5565b90508281526020810184848401111561253b5761253a612443565b5b6125468482856124ff565b509392505050565b5f82601f8301126125625761256161243f565b5b813561257284826020860161250d565b91505092915050565b5f80fd5b5f819050919050565b6125918161257f565b811461259b575f80fd5b50565b5f813590506125ac81612588565b92915050565b5f604082840312156125c7576125c661257b565b5b6125d160406124b5565b90505f6125e08482850161259e565b5f8301525060206125f38482850161259e565b60208301525092915050565b5f805f8060a0858703121561261757612616612404565b5b5f6126248782880161242b565b945050602085013567ffffffffffffffff81111561264557612644612408565b5b6126518782880161254e565b935050604085013567ffffffffffffffff81111561267257612671612408565b5b61267e8782880161254e565b925050606061268f878288016125b2565b91505092959194509250565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6126c48261269b565b9050919050565b6126d4816126ba565b82525050565b5f6020820190506126ed5f8301846126cb565b92915050565b5f806040838503121561270957612708612404565b5b5f6127168582860161242b565b925050602083013567ffffffffffffffff81111561273757612736612408565b5b6127438582860161254e565b9150509250929050565b5f6020828403121561276257612761612404565b5b5f82013567ffffffffffffffff81111561277f5761277e612408565b5b61278b8482850161254e565b91505092915050565b61279d816126ba565b81146127a7575f80fd5b50565b5f813590506127b881612794565b92915050565b5f805f606084860312156127d5576127d4612404565b5b5f6127e28682870161242b565b93505060206127f3868287016127aa565b925050604084013567ffffffffffffffff81111561281457612813612408565b5b6128208682870161254e565b9150509250925092565b5f6020828403121561283f5761283e612404565b5b5f61284c8482850161259e565b91505092915050565b5f805f6080848603121561286c5761286b612404565b5b5f84013567ffffffffffffffff81111561288957612888612408565b5b6128958682870161254e565b935050602084013567ffffffffffffffff8111156128b6576128b5612408565b5b6128c28682870161254e565b92505060406128d3868287016125b2565b9150509250925092565b5f80604083850312156128f3576128f2612404565b5b5f6129008582860161242b565b9250506020612911858286016127aa565b9150509250929050565b5f602082840312156129305761292f612404565b5b5f61293d8482850161242b565b91505092915050565b5f806040838503121561295c5761295b612404565b5b5f612969858286016127aa565b925050602061297a8582860161259e565b9150509250929050565b5f806040838503121561299a57612999612404565b5b5f6129a7858286016127aa565b925050602083013567ffffffffffffffff8111156129c8576129c7612408565b5b6129d48582860161254e565b9150509250929050565b5f80604083850312156129f4576129f3612404565b5b5f612a018582860161242b565b9250506020612a128582860161242b565b9150509250929050565b5f805f8060a08587031215612a3457612a33612404565b5b5f85013567ffffffffffffffff811115612a5157612a50612408565b5b612a5d8782880161254e565b945050602085013567ffffffffffffffff811115612a7e57612a7d612408565b5b612a8a8782880161254e565b9350506040612a9b878288016125b2565b9250506080612aac878288016127aa565b91505092959194509250565b5f805f805f60c08688031215612ad157612ad0612404565b5b5f612ade8882890161242b565b955050602086013567ffffffffffffffff811115612aff57612afe612408565b5b612b0b8882890161254e565b945050604086013567ffffffffffffffff811115612b2c57612b2b612408565b5b612b388882890161254e565b9350506060612b49888289016125b2565b92505060a0612b5a888289016127aa565b9150509295509295909350565b5f805f60608486031215612b7e57612b7d612404565b5b5f612b8b8682870161242b565b9350506020612b9c8682870161242b565b9250506040612bad868287016127aa565b9150509250925092565b5f81519050919050565b5f81905092915050565b5f5b83811015612be8578082015181840152602081019050612bcd565b5f8484015250505050565b5f612bfd82612bb7565b612c078185612bc1565b9350612c17818560208601612bcb565b80840191505092915050565b5f612c2e8284612bf3565b915081905092915050565b5f67ffffffffffffffff82169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612c8382612c39565b9150612c8e83612c39565b9250828203905067ffffffffffffffff811115612cae57612cad612c4c565b5b92915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b612cf9612cf482612cb4565b612cdf565b82525050565b5f8160601b9050919050565b5f612d1582612cff565b9050919050565b5f612d2682612d0b565b9050919050565b612d3e612d39826126ba565b612d1c565b82525050565b5f612d4f8287612ce8565b600182019150612d5f8286612ce8565b600182019150612d6f8285612d2d565b601482019150612d7f8284612ce8565b60018201915081905095945050505050565b5f60ff82169050919050565b5f8160f81b9050919050565b5f612db382612d9d565b9050919050565b612dcb612dc682612d91565b612da9565b82525050565b5f612ddc8287612ce8565b600182019150612dec8286612ce8565b600182019150612dfc8285612d2d565b601482019150612e0c8284612dba565b60018201915081905095945050505050565b5f612e298288612ce8565b600182019150612e398287612ce8565b600182019150612e498286612d2d565b601482019150612e598285612ce8565b600182019150612e698284612dba565b6001820191508190509695505050505050565b5f61ffff82169050919050565b5f8160f01b9050919050565b5f612e9f82612e89565b9050919050565b612eb7612eb282612e7c565b612e95565b82525050565b5f612ec88288612ce8565b600182019150612ed88287612ce8565b600182019150612ee88286612d2d565b601482019150612ef88285612ce8565b600182019150612f088284612ea6565b6002820191508190509695505050505050565b5f62ffffff82169050919050565b5f8160e81b9050919050565b5f612f3f82612f29565b9050919050565b612f57612f5282612f1b565b612f35565b82525050565b5f612f688288612ce8565b600182019150612f788287612ce8565b600182019150612f888286612d2d565b601482019150612f988285612ce8565b600182019150612fa88284612f46565b6003820191508190509695505050505050565b5f63ffffffff82169050919050565b5f8160e01b9050919050565b5f612fe082612fca565b9050919050565b612ff8612ff382612fbb565b612fd6565b82525050565b5f6130098288612ce8565b6001820191506130198287612ce8565b6001820191506130298286612d2d565b6014820191506130398285612ce8565b6001820191506130498284612fe7565b6004820191508190509695505050505050565b5f64ffffffffff82169050919050565b5f8160d81b9050919050565b5f6130828261306c565b9050919050565b61309a6130958261305c565b613078565b82525050565b5f6130ab8288612ce8565b6001820191506130bb8287612ce8565b6001820191506130cb8286612d2d565b6014820191506130db8285612ce8565b6001820191506130eb8284613089565b6005820191508190509695505050505050565b5f65ffffffffffff82169050919050565b5f8160d01b9050919050565b5f6131258261310f565b9050919050565b61313d613138826130fe565b61311b565b82525050565b5f61314e8288612ce8565b60018201915061315e8287612ce8565b60018201915061316e8286612d2d565b60148201915061317e8285612ce8565b60018201915061318e828461312c565b6006820191508190509695505050505050565b5f66ffffffffffffff82169050919050565b5f8160c81b9050919050565b5f6131c9826131b3565b9050919050565b6131e16131dc826131a1565b6131bf565b82525050565b5f6131f28288612ce8565b6001820191506132028287612ce8565b6001820191506132128286612d2d565b6014820191506132228285612ce8565b60018201915061323282846131d0565b6007820191508190509695505050505050565b5f8160c01b9050919050565b5f61325b82613245565b9050919050565b61327361326e82612c39565b613251565b82525050565b5f6132848288612ce8565b6001820191506132948287612ce8565b6001820191506132a48286612d2d565b6014820191506132b48285612ce8565b6001820191506132c48284613262565b6008820191508190509695505050505050565b5f82825260208201905092915050565b5f6132f182612bb7565b6132fb81856132d7565b935061330b818560208601612bcb565b61331481612447565b840191505092915050565b5f6040820190506133325f8301856126cb565b818103602083015261334481846132e7565b90509392505050565b50565b5f61335b5f83612bc1565b91506133668261334d565b5f82019050919050565b5f61337a82613350565b9150819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6133ba8161257f565b82525050565b6133c98161240c565b82525050565b5f6060820190506133e25f8301866126cb565b6133ef60208301856133b1565b6133fc60408301846133c0565b949350505050565b5f6020820190506134175f8301846133c0565b92915050565b5f6134278261269b565b9050919050565b6134378161341d565b82525050565b5f60e0820190506134505f83018a6133c0565b61345d602083018961342e565b61346a60408301886133b1565b61347760608301876133b1565b61348460808301866133b1565b61349160a08301856133b1565b61349e60c08301846126cb565b98975050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea264697066735822122003ceca7a7c2a5be0d3b43f1e100996af2e5f781db62edc0550ca13412a361c4364736f6c63430008170033","sourceMap":"1176:58382:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43057:537;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;18043:458;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;19138:309;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5773:358;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;28426:1274;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;17004:179;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;47277:526;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9530:295;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;48496:663;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;49802:178;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13113:2706;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;37545:309;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;30801:356;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;34126:228;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7308:1118;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;35725:902;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;20729:1226;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;26884:526;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;31948:1673;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;39643:1698;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;25047:560;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;23160:537;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;45194:560;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10727:1144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43057:537;43227:19;43408:179;43449:4;43477:8;43505:4;43531:6;43566:10;43408:20;:179::i;:::-;43394:193;;43057:537;;;;;;:::o;18043:458::-;18127:19;18158;18180:20;18194:4;18180:6;:20::i;:::-;18158:42;;18323:11;18312:8;18306:15;18299:4;18289:8;18285:19;18272:11;18264:71;18249:86;;18354:62;18403:11;18354:34;:62::i;:::-;18481:11;18462;18431:63;;;;;;;;;;;;18148:353;18043:458;;;;:::o;19138:309::-;19208:19;19382:58;19403:15;:13;:15::i;:::-;19430:8;19382:13;:58::i;:::-;19368:72;;19138:309;;;:::o;5773:358::-;5842:19;5974:8;5968:15;5961:4;5951:8;5947:19;5934:11;5927:57;5912:72;;6003:62;6052:11;6003:34;:62::i;:::-;6111:11;6080:44;;;;;;;;;;;;5773:358;;;:::o;28426:1274::-;28565:13;28590:19;28612:20;28626:4;28612:6;:20::i;:::-;28590:42;;28642:29;28682:14;28674:23;;28642:55;;28765:4;28759:11;28830:100;28807:5;28783:161;28982:21;28975:4;28968:5;28964:16;28957:47;29075:100;29052:4;29045:5;29041:16;29017:172;29235:11;29229:4;29222:5;29219:1;29211:36;29202:45;;28732:525;29287:1;29270:19;;:5;:19;;;29266:97;;29345:5;29312:40;;;;;;;;;;;:::i;:::-;;;;;;;;29266:97;29421:11;29408:5;29377:57;;;;;;;;;;;;29446:12;29460:23;29487:5;:10;;29505:9;29516:4;29487:34;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29445:76;;;;29531:162;29595:7;29628:10;29668:14;29531:40;:162::i;:::-;28580:1120;;;;28426:1274;;;;;:::o;17004:179::-;17070:23;17123:53;17155:5;17169;17123:20;:53::i;:::-;17105:71;;17004:179;;;:::o;47277:526::-;47425:19;47606:190;47647:15;:13;:15::i;:::-;47686:8;47714:4;47740:6;47775:10;47606:20;:190::i;:::-;47592:204;;47277:526;;;;;:::o;9530:295::-;9677:19;9722:96;9753:8;9769:4;9783:6;9806:10;9722:19;:96::i;:::-;9708:110;;9530:295;;;;;:::o;48496:663::-;48580:23;48671:4;48665:11;48702:8;48696:4;48689:22;48738:4;48732;48724:19;48769:4;48763;48756:18;48833:100;48811:4;48787:160;48989:4;48983;48973:21;48967:4;48960:35;49021:3;49015:4;49008:17;49051:6;49045:4;49038:20;49085:4;49079;49071:19;49138:4;49132;49122:21;49103:40;;48640:513;48496:663;;;;:::o;49802:178::-;49868:23;49921:52;49950:4;49966:5;49921:21;:52::i;:::-;49903:70;;49802:178;;;:::o;13113:2706::-;13197:23;13232:17;13259:10;13279:4;13272:12;;13259:25;;13515:1;13496:16;:20;;;;:::i;:::-;13488:28;;:5;:28;13484:101;;;13567:5;13539:35;;;;;;;;;;;:::i;:::-;;;;;;;;13484:101;13764:4;13755:5;:13;13751:1991;;13815:4;13808:12;;13822:3;13827:8;13844:4;13837:12;;13791:59;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;13784:66;;13751:1991;;;14058:4;14049:5;:13;14045:1697;;14109:4;14102:12;;14116:3;14121:8;14137:5;14085:59;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;14078:66;;14045:1697;;;14650:15;14641:24;;:5;:24;14637:1105;;14712:4;14705:12;;14719:3;14724:8;14741:4;14734:12;;14754:5;14688:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;14681:80;;14637:1105;;;14791:16;14782:25;;:5;:25;14778:964;;14854:4;14847:12;;14861:3;14866:8;14883:4;14876:12;;14897:5;14830:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;14823:81;;14778:964;;;14934:16;14925:25;;:5;:25;14921:821;;14997:4;14990:12;;15004:3;15009:8;15026:4;15019:12;;15040:5;14973:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;14966:81;;14921:821;;;15077:16;15068:25;;:5;:25;15064:678;;15140:4;15133:12;;15147:3;15152:8;15169:4;15162:12;;15183:5;15116:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;15109:81;;15064:678;;;15220:16;15211:25;;:5;:25;15207:535;;15283:4;15276:12;;15290:3;15295:8;15312:4;15305:12;;15326:5;15259:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;15252:81;;15207:535;;;15363:16;15354:25;;:5;:25;15350:392;;15426:4;15419:12;;15433:3;15438:8;15455:4;15448:12;;15469:5;15402:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;15395:81;;15350:392;;;15506:16;15497:25;;:5;:25;15493:249;;15569:4;15562:12;;15576:3;15581:8;15598:4;15591:12;;15612:5;15545:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;15538:81;;15493:249;;;15681:4;15674:12;;15688:3;15693:8;15710:4;15703:12;;15724:5;15657:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;15650:81;;15493:249;15350:392;15207:535;15064:678;14921:821;14778:964;14637:1105;14045:1697;13751:1991;15804:4;15794:15;;;;;;15786:24;;15752:60;;13222:2597;;13113:2706;;;;:::o;37545:309::-;37615:19;37789:58;37810:15;:13;:15::i;:::-;37837:8;37789:13;:58::i;:::-;37775:72;;37545:309;;;:::o;30801:356::-;30896:13;31063:87;31089:15;:13;:15::i;:::-;31122:14;31144:4;31063:18;:87::i;:::-;31055:95;;30801:356;;;;:::o;34126:228::-;34214:23;34267:80;34296:4;34316:12;34340:5;34267:21;:80::i;:::-;34249:98;;34126:228;;;;:::o;7308:1118::-;7486:19;7620:8;7614:15;7607:4;7597:8;7593:19;7584:6;7578:13;7571:59;7556:74;;7649:62;7698:11;7649:34;:62::i;:::-;7757:11;7726:44;;;;;;;;;;;;7782:12;7796:23;7823:11;:16;;7847:6;:21;;;7870:4;7823:52;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7781:94;;;;7890:7;7885:116;;7959:5;7978:10;7920:70;;;;;;;;;;;;:::i;:::-;;;;;;;;7885:116;8032:1;8015:5;:13;;;:18;8011:409;;8237:13;:18;;8263:5;:13;;;8237:44;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8213:68;;;;;;;;8300:7;8295:115;;8364:5;8383:10;8334:61;;;;;;;;;;;;:::i;:::-;;;;;;;;8295:115;8011:409;7507:919;;7308:1118;;;;;;:::o;35725:902::-;35809:19;35840;35862:20;35876:4;35862:6;:20::i;:::-;35840:42;;35892:31;:86;;;;;;;;;;;;;;;;;;;35988:13;36126:11;36105:18;36099:25;36094:2;36074:18;36070:27;36067:1;36059:79;36050:88;;36178:1;36161:19;;:5;:19;;;36157:97;;36236:5;36203:40;;;;;;;;;;;:::i;:::-;;;;;;;;36157:97;36324:11;36311:5;36268:69;;;;;;;;;;;;36362:42;36391:11;36362:21;:42::i;:::-;36348:56;;36415:12;36433:5;:10;;36451:9;36462:8;36433:38;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36414:57;;;36481:80;36526:7;36548:11;36481:34;:80::i;:::-;36607:11;36576:44;;;;;;;;;;;;35830:797;;;;35725:902;;;;:::o;20729:1226::-;20930:19;20961;20983:20;20997:4;20983:6;:20::i;:::-;20961:42;;21128:11;21117:8;21111:15;21104:4;21094:8;21090:19;21081:6;21075:13;21067:73;21052:88;;21159:62;21208:11;21159:34;:62::i;:::-;21286:11;21267;21236:63;;;;;;;;;;;;21311:12;21325:23;21352:11;:16;;21376:6;:21;;;21399:4;21352:52;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21310:94;;;;21419:7;21414:116;;21488:5;21507:10;21449:70;;;;;;;;;;;;:::i;:::-;;;;;;;;21414:116;21561:1;21544:5;:13;;;:18;21540:409;;21766:13;:18;;21792:5;:13;;;21766:44;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21742:68;;;;;;;;21829:7;21824:115;;21893:5;21912:10;21863:61;;;;;;;;;;;;:::i;:::-;;;;;;;;21824:115;21540:409;20951:1004;;;20729:1226;;;;;;;:::o;26884:526::-;27032:19;27213:190;27254:15;:13;:15::i;:::-;27293:8;27321:4;27347:6;27382:10;27213:20;:190::i;:::-;27199:204;;26884:526;;;;;:::o;31948:1673::-;32084:23;33351:4;33345:11;33392:12;33385:4;33380:3;33376:14;33369:36;33441:4;33434;33429:3;33425:14;33418:28;33471:8;33466:3;33459:21;33515:4;33510:3;33506:14;33548:4;33541:5;33533:20;33602:2;33595:5;33585:20;33566:39;;32144:1471;;31948:1673;;;;;:::o;39643:1698::-;39844:19;39875;39897:20;39911:4;39897:6;:20::i;:::-;39875:42;;39927:31;:86;;;;;;;;;;;;;;;;;;;40023:13;40161:11;40140:18;40134:25;40129:2;40109:18;40105:27;40102:1;40094:79;40085:88;;40213:1;40196:19;;:5;:19;;;40192:97;;40271:5;40238:40;;;;;;;;;;;:::i;:::-;;;;;;;;40192:97;40359:11;40346:5;40303:69;;;;;;;;;;;;40397:42;40426:11;40397:21;:42::i;:::-;40383:56;;40450:12;40468:5;:10;;40486:6;:24;;;40512:8;40468:53;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40449:72;;;40531:80;40576:7;40598:11;40531:34;:80::i;:::-;40657:11;40626:44;;;;;;;;;;;;40681:23;40738:11;:16;;40762:6;:21;;;40785:4;40738:52;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40714:76;;;;;;;;40805:7;40800:116;;40874:5;40893:10;40835:70;;;;;;;;;;;;:::i;:::-;;;;;;;;40800:116;40947:1;40930:5;:13;;;:18;40926:409;;41152:13;:18;;41178:5;:13;;;41152:44;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;41128:68;;;;;;;;41215:7;41210:115;;41279:5;41298:10;41249:61;;;;;;;;;;;;:::i;:::-;;;;;;;;41210:115;40926:409;39865:1476;;;;;39643:1698;;;;;;;:::o;25047:560::-;25226:19;25407:193;25448:15;:13;:15::i;:::-;25487:8;25515:4;25541:6;25576:13;25407:20;:193::i;:::-;25393:207;;25047:560;;;;;;:::o;23160:537::-;23330:19;23511:179;23552:4;23580:8;23608:4;23634:6;23669:10;23511:20;:179::i;:::-;23497:193;;23160:537;;;;;;:::o;45194:560::-;45373:19;45554:193;45595:15;:13;:15::i;:::-;45634:8;45662:4;45688:6;45723:13;45554:20;:193::i;:::-;45540:207;;45194:560;;;;;;:::o;10727:1144::-;10821:13;10846:29;10886:14;10878:23;;10846:55;;10969:4;10963:11;11034:100;11011:5;10987:161;11186:21;11179:4;11172:5;11168:16;11161:47;11279:100;11256:4;11249:5;11245:16;11221:172;11432:4;11425:5;11422:1;11415:22;11406:31;;10936:511;11477:1;11460:19;;:5;:19;;;11456:97;;11535:5;11502:40;;;;;;;;;;;:::i;:::-;;;;;;;;11456:97;11598:5;11567:38;;;;;;;;;;;;11617:12;11631:23;11658:5;:10;;11676:9;11687:4;11658:34;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11616:76;;;;11702:162;11766:7;11799:10;11839:14;11702:40;:162::i;:::-;10836:1035;;;10727:1144;;;;:::o;51171:2025::-;51224:19;51256:23;51281:45;51330:24;51348:4;51330:10;:24::i;:::-;51255:99;;;;51384:21;51369:36;;;;;;;;:::i;:::-;;:11;:36;;;;;;;;:::i;:::-;;;:93;;;;;51435:27;51409:53;;;;;;;;:::i;:::-;;:22;:53;;;;;;;;:::i;:::-;;;51369:93;51365:1825;;;51618:10;51630:13;51645:4;51607:43;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;51597:54;;;;;;51583:68;;51365:1825;;;51687:21;51672:36;;;;;;;;:::i;:::-;;:11;:36;;;;;;;;:::i;:::-;;;:94;;;;;51738:28;51712:54;;;;;;;;:::i;:::-;;:22;:54;;;;;;;;:::i;:::-;;;51672:94;51668:1522;;;51863:67;51906:10;51890:28;;51882:37;;51924:4;51863:14;:67::i;:::-;51849:81;;51668:1522;;;51966:21;51951:36;;;;;;;;:::i;:::-;;:11;:36;;;;;;;;:::i;:::-;;;51947:1243;;52139:5;52117:29;;;;;;;;;;;:::i;:::-;;;;;;;;51947:1243;52182:23;52167:38;;;;;;;;:::i;:::-;;:11;:38;;;;;;;;:::i;:::-;;;:95;;;;;52235:27;52209:53;;;;;;;;:::i;:::-;;:22;:53;;;;;;;;:::i;:::-;;;52167:95;52163:1027;;;52514:52;52541:13;52533:22;;52560:4;52514:14;:52::i;:::-;52500:66;;52163:1027;;;52615:23;52600:38;;;;;;;;:::i;:::-;;:11;:38;;;;;;;;:::i;:::-;;;:102;;;;;52668:34;52642:60;;;;;;;;:::i;:::-;;:22;:60;;;;;;;;:::i;:::-;;;52600:102;52583:607;;;52863:5;52841:29;;;;;;;;;;;:::i;:::-;;;;;;;;52583:607;53126:15;:13;:15::i;:::-;53118:4;:23;53117:62;;53175:4;53117:62;;;53166:4;53155:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;53145:27;;;;;;53117:62;53103:76;;52163:1027;51668:1522;51365:1825;51245:1951;;51171:2025;;;:::o;58660:230::-;58776:1;58753:25;;:11;:25;;;:57;;;;58809:1;58782:11;:23;;;:28;58753:57;58749:135;;;58866:5;58833:40;;;;;;;;;;;:::i;:::-;;;;;;;;58749:135;58660:230;:::o;56114:1347::-;56162:12;57197:2;57182:12;:17;57172:28;57222:14;57258:12;57292:15;57329:16;57367:13;57402:10;56244:1186;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;56217:1227;;;;;;56210:1234;;56114:1347;:::o;59232:324::-;59404:7;59403:8;:43;;;;59445:1;59415:14;:26;;;:31;59403:43;59399:151;;;59508:5;59527:10;59469:70;;;;;;;;;;;;:::i;:::-;;;;;;;;59399:151;59232:324;;;:::o;57683:808::-;58343:7;58342:8;:37;;;;58377:1;58354:25;;:11;:25;;;58342:37;:69;;;;58410:1;58383:11;:23;;;:28;58342:69;58338:147;;;58467:5;58434:40;;;;;;;;;;;:::i;:::-;;;;;;;;58338:147;57683:808;;:::o;53650:1723::-;53721:23;53746:45;53833:10;53807:36;;53823:4;53807:22;;:36;;;:67;;;;;53847:27;53854:4;53859:2;53854:8;;;;;;;:::i;:::-;;;;;53847:27;;;;53807:67;53803:1564;;;53931:21;53954:27;53890:92;;;;;;;;53803:1564;;;54029:10;54003:36;;54019:4;54003:22;;:36;;;:67;;;;;54043:27;54050:4;54055:2;54050:8;;;;;;;:::i;:::-;;;;;54043:27;;;;54003:67;53999:1368;;;54127:21;54150:28;54086:93;;;;;;;;53999:1368;;;54226:10;54200:36;;54216:4;54200:22;;:36;;;54196:1171;;54293:21;54316:34;54252:99;;;;;;;;54196:1171;;;54406:1;54372:36;;54388:4;54372:22;;:36;;;:67;;;;;54412:27;54419:4;54424:2;54419:8;;;;;;;:::i;:::-;;;;;54412:27;;;;54372:67;54368:999;;;54496:23;54521:27;54455:94;;;;;;;;54368:999;;;54604:1;54570:36;;54586:4;54570:22;;:36;;;:67;;;;;54610:27;54617:4;54622:2;54617:8;;;;;;;:::i;:::-;;;;;54610:27;;;;54570:67;54566:801;;;54694:23;54719:28;54653:95;;;;;;;;54566:801;;;54803:1;54769:36;;54785:4;54769:22;;:36;;;54765:602;;54862:23;54887:34;54821:101;;;;;;;;54765:602;;;54943:27;54950:4;54955:2;54950:8;;;;;;;:::i;:::-;;;;;54943:27;;;;54939:428;;55027:18;55047:27;54986:89;;;;;;;;54939:428;;;55096:27;55103:4;55108:2;55103:8;;;;;;;:::i;:::-;;;;;55096:27;;;;55092:275;;55180:18;55200:28;55139:90;;;;;;;;55092:275;;;55301:18;55321:34;55260:96;;;;;;;;55092:275;54939:428;54765:602;54566:801;54368:999;54196:1171;53999:1368;53803:1564;53650:1723;;;:::o;55680:233::-;55749:12;55825:1;55819:4;55812:15;55853:1;55847:4;55840:15;55892:4;55886;55876:21;55868:29;;55680:233;;;;:::o;7:75:21:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:117;922:1;919;912:12;936:102;977:6;1028:2;1024:7;1019:2;1012:5;1008:14;1004:28;994:38;;936:102;;;:::o;1044:180::-;1092:77;1089:1;1082:88;1189:4;1186:1;1179:15;1213:4;1210:1;1203:15;1230:281;1313:27;1335:4;1313:27;:::i;:::-;1305:6;1301:40;1443:6;1431:10;1428:22;1407:18;1395:10;1392:34;1389:62;1386:88;;;1454:18;;:::i;:::-;1386:88;1494:10;1490:2;1483:22;1273:238;1230:281;;:::o;1517:129::-;1551:6;1578:20;;:::i;:::-;1568:30;;1607:33;1635:4;1627:6;1607:33;:::i;:::-;1517:129;;;:::o;1652:307::-;1713:4;1803:18;1795:6;1792:30;1789:56;;;1825:18;;:::i;:::-;1789:56;1863:29;1885:6;1863:29;:::i;:::-;1855:37;;1947:4;1941;1937:15;1929:23;;1652:307;;;:::o;1965:146::-;2062:6;2057:3;2052;2039:30;2103:1;2094:6;2089:3;2085:16;2078:27;1965:146;;;:::o;2117:423::-;2194:5;2219:65;2235:48;2276:6;2235:48;:::i;:::-;2219:65;:::i;:::-;2210:74;;2307:6;2300:5;2293:21;2345:4;2338:5;2334:16;2383:3;2374:6;2369:3;2365:16;2362:25;2359:112;;;2390:79;;:::i;:::-;2359:112;2480:54;2527:6;2522:3;2517;2480:54;:::i;:::-;2200:340;2117:423;;;;;:::o;2559:338::-;2614:5;2663:3;2656:4;2648:6;2644:17;2640:27;2630:122;;2671:79;;:::i;:::-;2630:122;2788:6;2775:20;2813:78;2887:3;2879:6;2872:4;2864:6;2860:17;2813:78;:::i;:::-;2804:87;;2620:277;2559:338;;;;:::o;2903:117::-;3012:1;3009;3002:12;3149:77;3186:7;3215:5;3204:16;;3149:77;;;:::o;3232:122::-;3305:24;3323:5;3305:24;:::i;:::-;3298:5;3295:35;3285:63;;3344:1;3341;3334:12;3285:63;3232:122;:::o;3360:139::-;3406:5;3444:6;3431:20;3422:29;;3460:33;3487:5;3460:33;:::i;:::-;3360:139;;;;:::o;3534:594::-;3605:5;3649:4;3637:9;3632:3;3628:19;3624:30;3621:117;;;3657:79;;:::i;:::-;3621:117;3756:21;3772:4;3756:21;:::i;:::-;3747:30;;3849:1;3889:49;3934:3;3925:6;3914:9;3910:22;3889:49;:::i;:::-;3882:4;3875:5;3871:16;3864:75;3787:163;4019:2;4060:49;4105:3;4096:6;4085:9;4081:22;4060:49;:::i;:::-;4053:4;4046:5;4042:16;4035:75;3960:161;3534:594;;;;:::o;4134:1165::-;4260:6;4268;4276;4284;4333:3;4321:9;4312:7;4308:23;4304:33;4301:120;;;4340:79;;:::i;:::-;4301:120;4460:1;4485:53;4530:7;4521:6;4510:9;4506:22;4485:53;:::i;:::-;4475:63;;4431:117;4615:2;4604:9;4600:18;4587:32;4646:18;4638:6;4635:30;4632:117;;;4668:79;;:::i;:::-;4632:117;4773:62;4827:7;4818:6;4807:9;4803:22;4773:62;:::i;:::-;4763:72;;4558:287;4912:2;4901:9;4897:18;4884:32;4943:18;4935:6;4932:30;4929:117;;;4965:79;;:::i;:::-;4929:117;5070:62;5124:7;5115:6;5104:9;5100:22;5070:62;:::i;:::-;5060:72;;4855:287;5181:2;5207:75;5274:7;5265:6;5254:9;5250:22;5207:75;:::i;:::-;5197:85;;5152:140;4134:1165;;;;;;;:::o;5305:126::-;5342:7;5382:42;5375:5;5371:54;5360:65;;5305:126;;;:::o;5437:96::-;5474:7;5503:24;5521:5;5503:24;:::i;:::-;5492:35;;5437:96;;;:::o;5539:118::-;5626:24;5644:5;5626:24;:::i;:::-;5621:3;5614:37;5539:118;;:::o;5663:222::-;5756:4;5794:2;5783:9;5779:18;5771:26;;5807:71;5875:1;5864:9;5860:17;5851:6;5807:71;:::i;:::-;5663:222;;;;:::o;5891:652::-;5968:6;5976;6025:2;6013:9;6004:7;6000:23;5996:32;5993:119;;;6031:79;;:::i;:::-;5993:119;6151:1;6176:53;6221:7;6212:6;6201:9;6197:22;6176:53;:::i;:::-;6166:63;;6122:117;6306:2;6295:9;6291:18;6278:32;6337:18;6329:6;6326:30;6323:117;;;6359:79;;:::i;:::-;6323:117;6464:62;6518:7;6509:6;6498:9;6494:22;6464:62;:::i;:::-;6454:72;;6249:287;5891:652;;;;;:::o;6549:507::-;6617:6;6666:2;6654:9;6645:7;6641:23;6637:32;6634:119;;;6672:79;;:::i;:::-;6634:119;6820:1;6809:9;6805:17;6792:31;6850:18;6842:6;6839:30;6836:117;;;6872:79;;:::i;:::-;6836:117;6977:62;7031:7;7022:6;7011:9;7007:22;6977:62;:::i;:::-;6967:72;;6763:286;6549:507;;;;:::o;7062:122::-;7135:24;7153:5;7135:24;:::i;:::-;7128:5;7125:35;7115:63;;7174:1;7171;7164:12;7115:63;7062:122;:::o;7190:139::-;7236:5;7274:6;7261:20;7252:29;;7290:33;7317:5;7290:33;:::i;:::-;7190:139;;;;:::o;7335:797::-;7421:6;7429;7437;7486:2;7474:9;7465:7;7461:23;7457:32;7454:119;;;7492:79;;:::i;:::-;7454:119;7612:1;7637:53;7682:7;7673:6;7662:9;7658:22;7637:53;:::i;:::-;7627:63;;7583:117;7739:2;7765:53;7810:7;7801:6;7790:9;7786:22;7765:53;:::i;:::-;7755:63;;7710:118;7895:2;7884:9;7880:18;7867:32;7926:18;7918:6;7915:30;7912:117;;;7948:79;;:::i;:::-;7912:117;8053:62;8107:7;8098:6;8087:9;8083:22;8053:62;:::i;:::-;8043:72;;7838:287;7335:797;;;;;:::o;8138:329::-;8197:6;8246:2;8234:9;8225:7;8221:23;8217:32;8214:119;;;8252:79;;:::i;:::-;8214:119;8372:1;8397:53;8442:7;8433:6;8422:9;8418:22;8397:53;:::i;:::-;8387:63;;8343:117;8138:329;;;;:::o;8473:1020::-;8590:6;8598;8606;8655:3;8643:9;8634:7;8630:23;8626:33;8623:120;;;8662:79;;:::i;:::-;8623:120;8810:1;8799:9;8795:17;8782:31;8840:18;8832:6;8829:30;8826:117;;;8862:79;;:::i;:::-;8826:117;8967:62;9021:7;9012:6;9001:9;8997:22;8967:62;:::i;:::-;8957:72;;8753:286;9106:2;9095:9;9091:18;9078:32;9137:18;9129:6;9126:30;9123:117;;;9159:79;;:::i;:::-;9123:117;9264:62;9318:7;9309:6;9298:9;9294:22;9264:62;:::i;:::-;9254:72;;9049:287;9375:2;9401:75;9468:7;9459:6;9448:9;9444:22;9401:75;:::i;:::-;9391:85;;9346:140;8473:1020;;;;;:::o;9499:474::-;9567:6;9575;9624:2;9612:9;9603:7;9599:23;9595:32;9592:119;;;9630:79;;:::i;:::-;9592:119;9750:1;9775:53;9820:7;9811:6;9800:9;9796:22;9775:53;:::i;:::-;9765:63;;9721:117;9877:2;9903:53;9948:7;9939:6;9928:9;9924:22;9903:53;:::i;:::-;9893:63;;9848:118;9499:474;;;;;:::o;9979:329::-;10038:6;10087:2;10075:9;10066:7;10062:23;10058:32;10055:119;;;10093:79;;:::i;:::-;10055:119;10213:1;10238:53;10283:7;10274:6;10263:9;10259:22;10238:53;:::i;:::-;10228:63;;10184:117;9979:329;;;;:::o;10314:474::-;10382:6;10390;10439:2;10427:9;10418:7;10414:23;10410:32;10407:119;;;10445:79;;:::i;:::-;10407:119;10565:1;10590:53;10635:7;10626:6;10615:9;10611:22;10590:53;:::i;:::-;10580:63;;10536:117;10692:2;10718:53;10763:7;10754:6;10743:9;10739:22;10718:53;:::i;:::-;10708:63;;10663:118;10314:474;;;;;:::o;10794:652::-;10871:6;10879;10928:2;10916:9;10907:7;10903:23;10899:32;10896:119;;;10934:79;;:::i;:::-;10896:119;11054:1;11079:53;11124:7;11115:6;11104:9;11100:22;11079:53;:::i;:::-;11069:63;;11025:117;11209:2;11198:9;11194:18;11181:32;11240:18;11232:6;11229:30;11226:117;;;11262:79;;:::i;:::-;11226:117;11367:62;11421:7;11412:6;11401:9;11397:22;11367:62;:::i;:::-;11357:72;;11152:287;10794:652;;;;;:::o;11452:474::-;11520:6;11528;11577:2;11565:9;11556:7;11552:23;11548:32;11545:119;;;11583:79;;:::i;:::-;11545:119;11703:1;11728:53;11773:7;11764:6;11753:9;11749:22;11728:53;:::i;:::-;11718:63;;11674:117;11830:2;11856:53;11901:7;11892:6;11881:9;11877:22;11856:53;:::i;:::-;11846:63;;11801:118;11452:474;;;;;:::o;11932:1166::-;12058:6;12066;12074;12082;12131:3;12119:9;12110:7;12106:23;12102:33;12099:120;;;12138:79;;:::i;:::-;12099:120;12286:1;12275:9;12271:17;12258:31;12316:18;12308:6;12305:30;12302:117;;;12338:79;;:::i;:::-;12302:117;12443:62;12497:7;12488:6;12477:9;12473:22;12443:62;:::i;:::-;12433:72;;12229:286;12582:2;12571:9;12567:18;12554:32;12613:18;12605:6;12602:30;12599:117;;;12635:79;;:::i;:::-;12599:117;12740:62;12794:7;12785:6;12774:9;12770:22;12740:62;:::i;:::-;12730:72;;12525:287;12851:2;12877:75;12944:7;12935:6;12924:9;12920:22;12877:75;:::i;:::-;12867:85;;12822:140;13001:3;13028:53;13073:7;13064:6;13053:9;13049:22;13028:53;:::i;:::-;13018:63;;12972:119;11932:1166;;;;;;;:::o;13104:1311::-;13239:6;13247;13255;13263;13271;13320:3;13308:9;13299:7;13295:23;13291:33;13288:120;;;13327:79;;:::i;:::-;13288:120;13447:1;13472:53;13517:7;13508:6;13497:9;13493:22;13472:53;:::i;:::-;13462:63;;13418:117;13602:2;13591:9;13587:18;13574:32;13633:18;13625:6;13622:30;13619:117;;;13655:79;;:::i;:::-;13619:117;13760:62;13814:7;13805:6;13794:9;13790:22;13760:62;:::i;:::-;13750:72;;13545:287;13899:2;13888:9;13884:18;13871:32;13930:18;13922:6;13919:30;13916:117;;;13952:79;;:::i;:::-;13916:117;14057:62;14111:7;14102:6;14091:9;14087:22;14057:62;:::i;:::-;14047:72;;13842:287;14168:2;14194:75;14261:7;14252:6;14241:9;14237:22;14194:75;:::i;:::-;14184:85;;14139:140;14318:3;14345:53;14390:7;14381:6;14370:9;14366:22;14345:53;:::i;:::-;14335:63;;14289:119;13104:1311;;;;;;;;:::o;14421:619::-;14498:6;14506;14514;14563:2;14551:9;14542:7;14538:23;14534:32;14531:119;;;14569:79;;:::i;:::-;14531:119;14689:1;14714:53;14759:7;14750:6;14739:9;14735:22;14714:53;:::i;:::-;14704:63;;14660:117;14816:2;14842:53;14887:7;14878:6;14867:9;14863:22;14842:53;:::i;:::-;14832:63;;14787:118;14944:2;14970:53;15015:7;15006:6;14995:9;14991:22;14970:53;:::i;:::-;14960:63;;14915:118;14421:619;;;;;:::o;15046:98::-;15097:6;15131:5;15125:12;15115:22;;15046:98;;;:::o;15150:147::-;15251:11;15288:3;15273:18;;15150:147;;;;:::o;15303:246::-;15384:1;15394:113;15408:6;15405:1;15402:13;15394:113;;;15493:1;15488:3;15484:11;15478:18;15474:1;15469:3;15465:11;15458:39;15430:2;15427:1;15423:10;15418:15;;15394:113;;;15541:1;15532:6;15527:3;15523:16;15516:27;15365:184;15303:246;;;:::o;15555:386::-;15659:3;15687:38;15719:5;15687:38;:::i;:::-;15741:88;15822:6;15817:3;15741:88;:::i;:::-;15734:95;;15838:65;15896:6;15891:3;15884:4;15877:5;15873:16;15838:65;:::i;:::-;15928:6;15923:3;15919:16;15912:23;;15663:278;15555:386;;;;:::o;15947:271::-;16077:3;16099:93;16188:3;16179:6;16099:93;:::i;:::-;16092:100;;16209:3;16202:10;;15947:271;;;;:::o;16224:101::-;16260:7;16300:18;16293:5;16289:30;16278:41;;16224:101;;;:::o;16331:180::-;16379:77;16376:1;16369:88;16476:4;16473:1;16466:15;16500:4;16497:1;16490:15;16517:208;16556:4;16576:19;16593:1;16576:19;:::i;:::-;16571:24;;16609:19;16626:1;16609:19;:::i;:::-;16604:24;;16652:1;16649;16645:9;16637:17;;16676:18;16670:4;16667:28;16664:54;;;16698:18;;:::i;:::-;16664:54;16517:208;;;;:::o;16731:149::-;16767:7;16807:66;16800:5;16796:78;16785:89;;16731:149;;;:::o;16886:78::-;16924:7;16953:5;16942:16;;16886:78;;;:::o;16970:153::-;17073:43;17092:23;17109:5;17092:23;:::i;:::-;17073:43;:::i;:::-;17068:3;17061:56;16970:153;;:::o;17129:94::-;17162:8;17210:5;17206:2;17202:14;17181:35;;17129:94;;;:::o;17229:::-;17268:7;17297:20;17311:5;17297:20;:::i;:::-;17286:31;;17229:94;;;:::o;17329:100::-;17368:7;17397:26;17417:5;17397:26;:::i;:::-;17386:37;;17329:100;;;:::o;17435:157::-;17540:45;17560:24;17578:5;17560:24;:::i;:::-;17540:45;:::i;:::-;17535:3;17528:58;17435:157;;:::o;17598:664::-;17788:3;17803:73;17872:3;17863:6;17803:73;:::i;:::-;17901:1;17896:3;17892:11;17885:18;;17913:73;17982:3;17973:6;17913:73;:::i;:::-;18011:1;18006:3;18002:11;17995:18;;18023:75;18094:3;18085:6;18023:75;:::i;:::-;18123:2;18118:3;18114:12;18107:19;;18136:73;18205:3;18196:6;18136:73;:::i;:::-;18234:1;18229:3;18225:11;18218:18;;18253:3;18246:10;;17598:664;;;;;;;:::o;18268:86::-;18303:7;18343:4;18336:5;18332:16;18321:27;;18268:86;;;:::o;18360:96::-;18394:8;18443:5;18438:3;18434:15;18413:36;;18360:96;;;:::o;18462:93::-;18499:7;18528:21;18543:5;18528:21;:::i;:::-;18517:32;;18462:93;;;:::o;18561:149::-;18662:41;18680:22;18696:5;18680:22;:::i;:::-;18662:41;:::i;:::-;18657:3;18650:54;18561:149;;:::o;18716:660::-;18904:3;18919:73;18988:3;18979:6;18919:73;:::i;:::-;19017:1;19012:3;19008:11;19001:18;;19029:73;19098:3;19089:6;19029:73;:::i;:::-;19127:1;19122:3;19118:11;19111:18;;19139:75;19210:3;19201:6;19139:75;:::i;:::-;19239:2;19234:3;19230:12;19223:19;;19252:71;19319:3;19310:6;19252:71;:::i;:::-;19348:1;19343:3;19339:11;19332:18;;19367:3;19360:10;;18716:660;;;;;;;:::o;19382:796::-;19596:3;19611:73;19680:3;19671:6;19611:73;:::i;:::-;19709:1;19704:3;19700:11;19693:18;;19721:73;19790:3;19781:6;19721:73;:::i;:::-;19819:1;19814:3;19810:11;19803:18;;19831:75;19902:3;19893:6;19831:75;:::i;:::-;19931:2;19926:3;19922:12;19915:19;;19944:73;20013:3;20004:6;19944:73;:::i;:::-;20042:1;20037:3;20033:11;20026:18;;20054:71;20121:3;20112:6;20054:71;:::i;:::-;20150:1;20145:3;20141:11;20134:18;;20169:3;20162:10;;19382:796;;;;;;;;:::o;20184:89::-;20220:7;20260:6;20253:5;20249:18;20238:29;;20184:89;;;:::o;20279:96::-;20313:8;20362:5;20357:3;20353:15;20332:36;;20279:96;;;:::o;20381:94::-;20419:7;20448:21;20463:5;20448:21;:::i;:::-;20437:32;;20381:94;;;:::o;20481:153::-;20584:43;20603:23;20620:5;20603:23;:::i;:::-;20584:43;:::i;:::-;20579:3;20572:56;20481:153;;:::o;20640:800::-;20856:3;20871:73;20940:3;20931:6;20871:73;:::i;:::-;20969:1;20964:3;20960:11;20953:18;;20981:73;21050:3;21041:6;20981:73;:::i;:::-;21079:1;21074:3;21070:11;21063:18;;21091:75;21162:3;21153:6;21091:75;:::i;:::-;21191:2;21186:3;21182:12;21175:19;;21204:73;21273:3;21264:6;21204:73;:::i;:::-;21302:1;21297:3;21293:11;21286:18;;21314:73;21383:3;21374:6;21314:73;:::i;:::-;21412:1;21407:3;21403:11;21396:18;;21431:3;21424:10;;20640:800;;;;;;;;:::o;21446:91::-;21482:7;21522:8;21515:5;21511:20;21500:31;;21446:91;;;:::o;21543:96::-;21577:8;21626:5;21621:3;21617:15;21596:36;;21543:96;;;:::o;21645:94::-;21683:7;21712:21;21727:5;21712:21;:::i;:::-;21701:32;;21645:94;;;:::o;21745:153::-;21848:43;21867:23;21884:5;21867:23;:::i;:::-;21848:43;:::i;:::-;21843:3;21836:56;21745:153;;:::o;21904:800::-;22120:3;22135:73;22204:3;22195:6;22135:73;:::i;:::-;22233:1;22228:3;22224:11;22217:18;;22245:73;22314:3;22305:6;22245:73;:::i;:::-;22343:1;22338:3;22334:11;22327:18;;22355:75;22426:3;22417:6;22355:75;:::i;:::-;22455:2;22450:3;22446:12;22439:19;;22468:73;22537:3;22528:6;22468:73;:::i;:::-;22566:1;22561:3;22557:11;22550:18;;22578:73;22647:3;22638:6;22578:73;:::i;:::-;22676:1;22671:3;22667:11;22660:18;;22695:3;22688:10;;21904:800;;;;;;;;:::o;22710:93::-;22746:7;22786:10;22779:5;22775:22;22764:33;;22710:93;;;:::o;22809:96::-;22843:8;22892:5;22887:3;22883:15;22862:36;;22809:96;;;:::o;22911:94::-;22949:7;22978:21;22993:5;22978:21;:::i;:::-;22967:32;;22911:94;;;:::o;23011:153::-;23114:43;23133:23;23150:5;23133:23;:::i;:::-;23114:43;:::i;:::-;23109:3;23102:56;23011:153;;:::o;23170:800::-;23386:3;23401:73;23470:3;23461:6;23401:73;:::i;:::-;23499:1;23494:3;23490:11;23483:18;;23511:73;23580:3;23571:6;23511:73;:::i;:::-;23609:1;23604:3;23600:11;23593:18;;23621:75;23692:3;23683:6;23621:75;:::i;:::-;23721:2;23716:3;23712:12;23705:19;;23734:73;23803:3;23794:6;23734:73;:::i;:::-;23832:1;23827:3;23823:11;23816:18;;23844:73;23913:3;23904:6;23844:73;:::i;:::-;23942:1;23937:3;23933:11;23926:18;;23961:3;23954:10;;23170:800;;;;;;;;:::o;23976:95::-;24012:7;24052:12;24045:5;24041:24;24030:35;;23976:95;;;:::o;24077:96::-;24111:8;24160:5;24155:3;24151:15;24130:36;;24077:96;;;:::o;24179:94::-;24217:7;24246:21;24261:5;24246:21;:::i;:::-;24235:32;;24179:94;;;:::o;24279:153::-;24382:43;24401:23;24418:5;24401:23;:::i;:::-;24382:43;:::i;:::-;24377:3;24370:56;24279:153;;:::o;24438:800::-;24654:3;24669:73;24738:3;24729:6;24669:73;:::i;:::-;24767:1;24762:3;24758:11;24751:18;;24779:73;24848:3;24839:6;24779:73;:::i;:::-;24877:1;24872:3;24868:11;24861:18;;24889:75;24960:3;24951:6;24889:75;:::i;:::-;24989:2;24984:3;24980:12;24973:19;;25002:73;25071:3;25062:6;25002:73;:::i;:::-;25100:1;25095:3;25091:11;25084:18;;25112:73;25181:3;25172:6;25112:73;:::i;:::-;25210:1;25205:3;25201:11;25194:18;;25229:3;25222:10;;24438:800;;;;;;;;:::o;25244:97::-;25280:7;25320:14;25313:5;25309:26;25298:37;;25244:97;;;:::o;25347:96::-;25381:8;25430:5;25425:3;25421:15;25400:36;;25347:96;;;:::o;25449:94::-;25487:7;25516:21;25531:5;25516:21;:::i;:::-;25505:32;;25449:94;;;:::o;25549:153::-;25652:43;25671:23;25688:5;25671:23;:::i;:::-;25652:43;:::i;:::-;25647:3;25640:56;25549:153;;:::o;25708:800::-;25924:3;25939:73;26008:3;25999:6;25939:73;:::i;:::-;26037:1;26032:3;26028:11;26021:18;;26049:73;26118:3;26109:6;26049:73;:::i;:::-;26147:1;26142:3;26138:11;26131:18;;26159:75;26230:3;26221:6;26159:75;:::i;:::-;26259:2;26254:3;26250:12;26243:19;;26272:73;26341:3;26332:6;26272:73;:::i;:::-;26370:1;26365:3;26361:11;26354:18;;26382:73;26451:3;26442:6;26382:73;:::i;:::-;26480:1;26475:3;26471:11;26464:18;;26499:3;26492:10;;25708:800;;;;;;;;:::o;26514:99::-;26550:7;26590:16;26583:5;26579:28;26568:39;;26514:99;;;:::o;26619:96::-;26653:8;26702:5;26697:3;26693:15;26672:36;;26619:96;;;:::o;26721:94::-;26759:7;26788:21;26803:5;26788:21;:::i;:::-;26777:32;;26721:94;;;:::o;26821:153::-;26924:43;26943:23;26960:5;26943:23;:::i;:::-;26924:43;:::i;:::-;26919:3;26912:56;26821:153;;:::o;26980:800::-;27196:3;27211:73;27280:3;27271:6;27211:73;:::i;:::-;27309:1;27304:3;27300:11;27293:18;;27321:73;27390:3;27381:6;27321:73;:::i;:::-;27419:1;27414:3;27410:11;27403:18;;27431:75;27502:3;27493:6;27431:75;:::i;:::-;27531:2;27526:3;27522:12;27515:19;;27544:73;27613:3;27604:6;27544:73;:::i;:::-;27642:1;27637:3;27633:11;27626:18;;27654:73;27723:3;27714:6;27654:73;:::i;:::-;27752:1;27747:3;27743:11;27736:18;;27771:3;27764:10;;26980:800;;;;;;;;:::o;27786:96::-;27820:8;27869:5;27864:3;27860:15;27839:36;;27786:96;;;:::o;27888:94::-;27926:7;27955:21;27970:5;27955:21;:::i;:::-;27944:32;;27888:94;;;:::o;27988:153::-;28091:43;28110:23;28127:5;28110:23;:::i;:::-;28091:43;:::i;:::-;28086:3;28079:56;27988:153;;:::o;28147:800::-;28363:3;28378:73;28447:3;28438:6;28378:73;:::i;:::-;28476:1;28471:3;28467:11;28460:18;;28488:73;28557:3;28548:6;28488:73;:::i;:::-;28586:1;28581:3;28577:11;28570:18;;28598:75;28669:3;28660:6;28598:75;:::i;:::-;28698:2;28693:3;28689:12;28682:19;;28711:73;28780:3;28771:6;28711:73;:::i;:::-;28809:1;28804:3;28800:11;28793:18;;28821:73;28890:3;28881:6;28821:73;:::i;:::-;28919:1;28914:3;28910:11;28903:18;;28938:3;28931:10;;28147:800;;;;;;;;:::o;28953:168::-;29036:11;29070:6;29065:3;29058:19;29110:4;29105:3;29101:14;29086:29;;28953:168;;;;:::o;29127:373::-;29213:3;29241:38;29273:5;29241:38;:::i;:::-;29295:70;29358:6;29353:3;29295:70;:::i;:::-;29288:77;;29374:65;29432:6;29427:3;29420:4;29413:5;29409:16;29374:65;:::i;:::-;29464:29;29486:6;29464:29;:::i;:::-;29459:3;29455:39;29448:46;;29217:283;29127:373;;;;:::o;29506:419::-;29645:4;29683:2;29672:9;29668:18;29660:26;;29696:71;29764:1;29753:9;29749:17;29740:6;29696:71;:::i;:::-;29814:9;29808:4;29804:20;29799:2;29788:9;29784:18;29777:48;29842:76;29913:4;29904:6;29842:76;:::i;:::-;29834:84;;29506:419;;;;;:::o;29931:114::-;;:::o;30051:398::-;30210:3;30231:83;30312:1;30307:3;30231:83;:::i;:::-;30224:90;;30323:93;30412:3;30323:93;:::i;:::-;30441:1;30436:3;30432:11;30425:18;;30051:398;;;:::o;30455:379::-;30639:3;30661:147;30804:3;30661:147;:::i;:::-;30654:154;;30825:3;30818:10;;30455:379;;;:::o;30840:180::-;30888:77;30885:1;30878:88;30985:4;30982:1;30975:15;31009:4;31006:1;30999:15;31026:118;31113:24;31131:5;31113:24;:::i;:::-;31108:3;31101:37;31026:118;;:::o;31150:::-;31237:24;31255:5;31237:24;:::i;:::-;31232:3;31225:37;31150:118;;:::o;31274:442::-;31423:4;31461:2;31450:9;31446:18;31438:26;;31474:71;31542:1;31531:9;31527:17;31518:6;31474:71;:::i;:::-;31555:72;31623:2;31612:9;31608:18;31599:6;31555:72;:::i;:::-;31637;31705:2;31694:9;31690:18;31681:6;31637:72;:::i;:::-;31274:442;;;;;;:::o;31722:222::-;31815:4;31853:2;31842:9;31838:18;31830:26;;31866:71;31934:1;31923:9;31919:17;31910:6;31866:71;:::i;:::-;31722:222;;;;:::o;31950:104::-;31995:7;32024:24;32042:5;32024:24;:::i;:::-;32013:35;;31950:104;;;:::o;32060:142::-;32163:32;32189:5;32163:32;:::i;:::-;32158:3;32151:45;32060:142;;:::o;32208:918::-;32485:4;32523:3;32512:9;32508:19;32500:27;;32537:71;32605:1;32594:9;32590:17;32581:6;32537:71;:::i;:::-;32618:88;32702:2;32691:9;32687:18;32678:6;32618:88;:::i;:::-;32716:72;32784:2;32773:9;32769:18;32760:6;32716:72;:::i;:::-;32798;32866:2;32855:9;32851:18;32842:6;32798:72;:::i;:::-;32880:73;32948:3;32937:9;32933:19;32924:6;32880:73;:::i;:::-;32963;33031:3;33020:9;33016:19;33007:6;32963:73;:::i;:::-;33046;33114:3;33103:9;33099:19;33090:6;33046:73;:::i;:::-;32208:918;;;;;;;;;;:::o;33132:180::-;33180:77;33177:1;33170:88;33277:4;33274:1;33267:15;33301:4;33298:1;33291:15","linkReferences":{},"immutableReferences":{"9":[{"start":1970,"length":32},{"start":2265,"length":32},{"start":2456,"length":32},{"start":2550,"length":32},{"start":3373,"length":32},{"start":3624,"length":32},{"start":3720,"length":32},{"start":3804,"length":32},{"start":3949,"length":32},{"start":4188,"length":32},{"start":4772,"length":32},{"start":4868,"length":32},{"start":4952,"length":32},{"start":5097,"length":32},{"start":5410,"length":32},{"start":5889,"length":32},{"start":5985,"length":32},{"start":6069,"length":32},{"start":6214,"length":32},{"start":6559,"length":32},{"start":7180,"length":32},{"start":7476,"length":32},{"start":7726,"length":32},{"start":7923,"length":32},{"start":8117,"length":32}]}},"methodIdentifiers":{"computeCreate2Address(bytes32,bytes32)":"890c283b","computeCreate2Address(bytes32,bytes32,address)":"d323826a","computeCreate3Address(bytes32)":"6cec2536","computeCreate3Address(bytes32,address)":"42d654fc","computeCreateAddress(address,uint256)":"74637a7a","computeCreateAddress(uint256)":"28ddd046","deployCreate(bytes)":"27fe1822","deployCreate2(bytes)":"26a32fc7","deployCreate2(bytes32,bytes)":"26307668","deployCreate2AndInit(bytes,bytes,(uint256,uint256))":"c3fe107b","deployCreate2AndInit(bytes,bytes,(uint256,uint256),address)":"e437252a","deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256))":"e96deee4","deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":"a7db93f2","deployCreate2Clone(address,bytes)":"81503da1","deployCreate2Clone(bytes32,address,bytes)":"2852527a","deployCreate3(bytes)":"7f565360","deployCreate3(bytes32,bytes)":"9c36a286","deployCreate3AndInit(bytes,bytes,(uint256,uint256))":"2f990e3f","deployCreate3AndInit(bytes,bytes,(uint256,uint256),address)":"f5745aba","deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256))":"00d84acb","deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":"ddda0acb","deployCreateAndInit(bytes,bytes,(uint256,uint256))":"31a7c8c8","deployCreateAndInit(bytes,bytes,(uint256,uint256),address)":"98e81077","deployCreateClone(address,bytes)":"f9664498"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"FailedContractCreation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"revertData\",\"type\":\"bytes\"}],\"name\":\"FailedContractInitialisation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"revertData\",\"type\":\"bytes\"}],\"name\":\"FailedEtherTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"InvalidNonceValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"}],\"name\":\"InvalidSalt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ContractCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"Create3ProxyContractCreation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"computeCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"computedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"initCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeCreate2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"computedAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeCreate3Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"computedAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"computeCreate3Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"computedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"computeCreateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"computedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"computeCreateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"computedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deployCreate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deployCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deployCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"deployCreate2AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"}],\"name\":\"deployCreate2AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"deployCreate2AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"}],\"name\":\"deployCreate2AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployCreate2Clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployCreate2Clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deployCreate3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deployCreate3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"}],\"name\":\"deployCreate3AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"}],\"name\":\"deployCreate3AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"deployCreate3AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"deployCreate3AndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"}],\"name\":\"deployCreateAndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"constructorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initCallAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateX.Values\",\"name\":\"values\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"deployCreateAndInit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deployCreateClone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"pcaversaccio (https://web.archive.org/web/20230921103111/https://pcaversaccio.com/)\",\"custom:coauthor\":\"Matt Solomon (https://web.archive.org/web/20230921103335/https://mattsolomon.dev/)\",\"custom:security-contact\":\"See https://web.archive.org/web/20230921105029/https://raw.githubusercontent.com/pcaversaccio/createx/main/SECURITY.md.\",\"details\":\"To simplify testing of non-public variables and functions, we use the `internal` function visibility specifier `internal` for all variables and functions, even though they could technically be `private` since we do not expect anyone to inherit from the `CreateX` contract.\",\"errors\":{\"FailedContractCreation(address)\":[{\"details\":\"Error that occurs when the contract creation failed.\",\"params\":{\"emitter\":\"The contract that emits the error.\"}}],\"FailedContractInitialisation(address,bytes)\":[{\"details\":\"Error that occurs when the contract initialisation call failed.\",\"params\":{\"emitter\":\"The contract that emits the error.\",\"revertData\":\"The data returned by the failed initialisation call.\"}}],\"FailedEtherTransfer(address,bytes)\":[{\"details\":\"Error that occurs when transferring ether has failed.\",\"params\":{\"emitter\":\"The contract that emits the error.\",\"revertData\":\"The data returned by the failed ether transfer.\"}}],\"InvalidNonceValue(address)\":[{\"details\":\"Error that occurs when the nonce value is invalid.\",\"params\":{\"emitter\":\"The contract that emits the error.\"}}],\"InvalidSalt(address)\":[{\"details\":\"Error that occurs when the salt value is invalid.\",\"params\":{\"emitter\":\"The contract that emits the error.\"}}]},\"events\":{\"ContractCreation(address)\":{\"details\":\"Event that is emitted when a contract is successfully created.\",\"params\":{\"newContract\":\"The address of the new contract.\"}},\"ContractCreation(address,bytes32)\":{\"details\":\"Event that is emitted when a contract is successfully created.\",\"params\":{\"newContract\":\"The address of the new contract.\",\"salt\":\"The 32-byte random value used to create the contract address.\"}},\"Create3ProxyContractCreation(address,bytes32)\":{\"details\":\"Event that is emitted when a `CREATE3` proxy contract is successfully created.\",\"params\":{\"newContract\":\"The address of the new proxy contract.\",\"salt\":\"The 32-byte random value used to create the proxy address.\"}}},\"kind\":\"dev\",\"methods\":{\"computeCreate2Address(bytes32,bytes32)\":{\"details\":\"Returns the address where a contract will be stored if deployed via this contract using the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new destination address.\",\"params\":{\"initCodeHash\":\"The 32-byte bytecode digest of the contract creation bytecode.\",\"salt\":\"The 32-byte random value used to create the contract address.\"},\"returns\":{\"computedAddress\":\"The 20-byte address where a contract will be stored.\"}},\"computeCreate2Address(bytes32,bytes32,address)\":{\"details\":\"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new destination address. This implementation is based on OpenZeppelin: https://web.archive.org/web/20230921113703/https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/181d518609a9f006fcb97af63e6952e603cf100e/contracts/utils/Create2.sol.\",\"params\":{\"deployer\":\"The 20-byte deployer address.\",\"initCodeHash\":\"The 32-byte bytecode digest of the contract creation bytecode.\",\"salt\":\"The 32-byte random value used to create the contract address.\"},\"returns\":{\"computedAddress\":\"The 20-byte address where a contract will be stored.\"}},\"computeCreate3Address(bytes32)\":{\"details\":\"Returns the address where a contract will be stored if deployed via this contract using the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will result in a new destination address. This implementation is based on Solady: https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.\",\"params\":{\"salt\":\"The 32-byte random value used to create the proxy contract address.\"},\"returns\":{\"computedAddress\":\"The 20-byte address where a contract will be stored.\"}},\"computeCreate3Address(bytes32,address)\":{\"details\":\"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will result in a new destination address. This implementation is based on Solady: https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.\",\"params\":{\"deployer\":\"The 20-byte deployer address.\",\"salt\":\"The 32-byte random value used to create the proxy contract address.\"},\"returns\":{\"computedAddress\":\"The 20-byte address where a contract will be stored.\"}},\"computeCreateAddress(address,uint256)\":{\"details\":\"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf) and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/). For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207. Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification, all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the first contract address created by another contract is calculated with a non-zero nonce.\",\"params\":{\"deployer\":\"The 20-byte deployer address.\",\"nonce\":\"The next 32-byte nonce of the deployer address.\"},\"returns\":{\"computedAddress\":\"The 20-byte address where a contract will be stored.\"}},\"computeCreateAddress(uint256)\":{\"details\":\"Returns the address where a contract will be stored if deployed via this contract using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf) and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/). For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207. Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification, all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the first contract address created by another contract is calculated with a non-zero nonce.\",\"params\":{\"nonce\":\"The next 32-byte nonce of this contract.\"},\"returns\":{\"computedAddress\":\"The 20-byte address where a contract will be stored.\"}},\"deployCreate(bytes)\":{\"details\":\"Deploys a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode` and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.\",\"params\":{\"initCode\":\"The creation bytecode.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2(bytes)\":{\"details\":\"Deploys a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode` and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.\",\"params\":{\"initCode\":\"The creation bytecode.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2(bytes32,bytes)\":{\"details\":\"Deploys a new contract via calling the `CREATE2` opcode and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.\",\"params\":{\"initCode\":\"The creation bytecode.\",\"salt\":\"The 32-byte random value used to create the contract address.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2AndInit(bytes,bytes,(uint256,uint256))\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2AndInit(bytes,bytes,(uint256,uint256),address)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"refundAddress\":\"The 20-byte address where any excess ether is returned to.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256))\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the salt value `salt`, creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"salt\":\"The 32-byte random value used to create the contract address.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256),address)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"refundAddress\":\"The 20-byte address where any excess ether is returned to.\",\"salt\":\"The 32-byte random value used to create the contract address.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate2Clone(address,bytes)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt value `salt`, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed proxy contract.\",\"implementation\":\"The 20-byte implementation contract address.\"},\"returns\":{\"proxy\":\"The 20-byte address where the clone was deployed.\"}},\"deployCreate2Clone(bytes32,address,bytes)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt value `salt`, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed proxy contract.\",\"implementation\":\"The 20-byte implementation contract address.\",\"salt\":\"The 32-byte random value used to create the proxy contract address.\"},\"returns\":{\"proxy\":\"The 20-byte address where the clone was deployed.\"}},\"deployCreate3(bytes)\":{\"details\":\"Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\",\"params\":{\"initCode\":\"The creation bytecode.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate3(bytes32,bytes)\":{\"custom:security\":\"We strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.\",\"details\":\"Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\",\"params\":{\"initCode\":\"The creation bytecode.\",\"salt\":\"The 32-byte random value used to create the proxy contract address.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate3AndInit(bytes,bytes,(uint256,uint256))\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate3AndInit(bytes,bytes,(uint256,uint256),address)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"refundAddress\":\"The 20-byte address where any excess ether is returned to.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256))\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system. Furthermore, we strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.\",\"details\":\"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"salt\":\"The 32-byte random value used to create the proxy contract address.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256),address)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system. Furthermore, we strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.\",\"details\":\"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"refundAddress\":\"The 20-byte address where any excess ether is returned to.\",\"salt\":\"The 32-byte random value used to create the proxy contract address.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreateAndInit(bytes,bytes,(uint256,uint256))\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreateAndInit(bytes,bytes,(uint256,uint256),address)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys and initialises a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed contract.\",\"initCode\":\"The creation bytecode.\",\"refundAddress\":\"The 20-byte address where any excess ether is returned to.\",\"values\":\"The specific `payable` amounts for the deployment and initialisation call.\"},\"returns\":{\"newContract\":\"The 20-byte address where the contract was deployed.\"}},\"deployCreateClone(address,bytes)\":{\"custom:security\":\"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.\",\"details\":\"Deploys a new EIP-1167 minimal proxy contract using the `CREATE` opcode, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.\",\"params\":{\"data\":\"The initialisation code that is passed to the deployed proxy contract.\",\"implementation\":\"The 20-byte implementation contract address.\"},\"returns\":{\"proxy\":\"The 20-byte address where the clone was deployed.\"}}},\"stateVariables\":{\"_SELF\":{\"details\":\"Caches the contract address at construction, to be used for the custom errors.\"}},\"title\":\"CreateX Factory Smart Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Factory smart contract to make easier and safer usage of the `CREATE` (https://web.archive.org/web/20230921103540/https://www.evm.codes/#f0?fork=shanghai) and `CREATE2` (https://web.archive.org/web/20230921103540/https://www.evm.codes/#f5?fork=shanghai) EVM opcodes as well as of `CREATE3`-based (https://web.archive.org/web/20230921103920/https://github.com/ethereum/EIPs/pull/3171) contract creations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/createx/src/CreateX.sol\":\"CreateX\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts/=lib/interop-lib/vendor/openzeppelin-contracts/\",\":@solady/=lib/interop-lib/lib/solady/src/\",\":createx/=lib/createx/src/\",\":forge-std/=lib/forge-std/src/\",\":interop-lib/=lib/interop-lib/src/\",\":openzeppelin/=lib/createx/lib/openzeppelin-contracts/contracts/\",\":solady/=lib/createx/lib/solady/src/\"]},\"sources\":{\"lib/createx/src/CreateX.sol\":{\"keccak256\":\"0x2dbac4ef907ba7193aaffb58b8e3cd2e5d212dcfbd5fd87ba83c5ac720767c35\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://3419e91a1887f81a9c69d8fc4fb1c7ee40635e4b99328166ae15627897d077e3\",\"dweb:/ipfs/QmPgZMLnePsddpoYufeuUK5pmAU9cdjQPvFvswpPZEaH6W\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"emitter","type":"address"}],"type":"error","name":"FailedContractCreation"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"},{"internalType":"bytes","name":"revertData","type":"bytes"}],"type":"error","name":"FailedContractInitialisation"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"},{"internalType":"bytes","name":"revertData","type":"bytes"}],"type":"error","name":"FailedEtherTransfer"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"}],"type":"error","name":"InvalidNonceValue"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"}],"type":"error","name":"InvalidSalt"},{"inputs":[{"internalType":"address","name":"newContract","type":"address","indexed":true},{"internalType":"bytes32","name":"salt","type":"bytes32","indexed":true}],"type":"event","name":"ContractCreation","anonymous":false},{"inputs":[{"internalType":"address","name":"newContract","type":"address","indexed":true}],"type":"event","name":"ContractCreation","anonymous":false},{"inputs":[{"internalType":"address","name":"newContract","type":"address","indexed":true},{"internalType":"bytes32","name":"salt","type":"bytes32","indexed":true}],"type":"event","name":"Create3ProxyContractCreation","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes32","name":"initCodeHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"computeCreate2Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes32","name":"initCodeHash","type":"bytes32"},{"internalType":"address","name":"deployer","type":"address"}],"stateMutability":"pure","type":"function","name":"computeCreate2Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"deployer","type":"address"}],"stateMutability":"pure","type":"function","name":"computeCreate3Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"}],"stateMutability":"view","type":"function","name":"computeCreate3Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function","name":"computeCreateAddress","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}]},{"inputs":[{"internalType":"address","name":"deployer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function","name":"computeCreateAddress","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate2","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate2","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]},{"internalType":"address","name":"refundAddress","type":"address"}],"stateMutability":"payable","type":"function","name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]},{"internalType":"address","name":"refundAddress","type":"address"}],"stateMutability":"payable","type":"function","name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"implementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate2Clone","outputs":[{"internalType":"address","name":"proxy","type":"address"}]},{"inputs":[{"internalType":"address","name":"implementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate2Clone","outputs":[{"internalType":"address","name":"proxy","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate3","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreate3","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]},{"internalType":"address","name":"refundAddress","type":"address"}],"stateMutability":"payable","type":"function","name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]},{"internalType":"address","name":"refundAddress","type":"address"}],"stateMutability":"payable","type":"function","name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]}],"stateMutability":"payable","type":"function","name":"deployCreateAndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct CreateX.Values","name":"values","type":"tuple","components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}]},{"internalType":"address","name":"refundAddress","type":"address"}],"stateMutability":"payable","type":"function","name":"deployCreateAndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}]},{"inputs":[{"internalType":"address","name":"implementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"deployCreateClone","outputs":[{"internalType":"address","name":"proxy","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"computeCreate2Address(bytes32,bytes32)":{"details":"Returns the address where a contract will be stored if deployed via this contract using the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new destination address.","params":{"initCodeHash":"The 32-byte bytecode digest of the contract creation bytecode.","salt":"The 32-byte random value used to create the contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreate2Address(bytes32,bytes32,address)":{"details":"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new destination address. This implementation is based on OpenZeppelin: https://web.archive.org/web/20230921113703/https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/181d518609a9f006fcb97af63e6952e603cf100e/contracts/utils/Create2.sol.","params":{"deployer":"The 20-byte deployer address.","initCodeHash":"The 32-byte bytecode digest of the contract creation bytecode.","salt":"The 32-byte random value used to create the contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreate3Address(bytes32)":{"details":"Returns the address where a contract will be stored if deployed via this contract using the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will result in a new destination address. This implementation is based on Solady: https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.","params":{"salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreate3Address(bytes32,address)":{"details":"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will result in a new destination address. This implementation is based on Solady: https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.","params":{"deployer":"The 20-byte deployer address.","salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreateAddress(address,uint256)":{"details":"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf) and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/). For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207. Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification, all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the first contract address created by another contract is calculated with a non-zero nonce.","params":{"deployer":"The 20-byte deployer address.","nonce":"The next 32-byte nonce of the deployer address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreateAddress(uint256)":{"details":"Returns the address where a contract will be stored if deployed via this contract using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf) and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/). For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207. Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification, all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the first contract address created by another contract is calculated with a non-zero nonce.","params":{"nonce":"The next 32-byte nonce of this contract."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"deployCreate(bytes)":{"details":"Deploys a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode` and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.","params":{"initCode":"The creation bytecode."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2(bytes)":{"details":"Deploys a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode` and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.","params":{"initCode":"The creation bytecode."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2(bytes32,bytes)":{"details":"Deploys a new contract via calling the `CREATE2` opcode and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.","params":{"initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the contract address."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the salt value `salt`, creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","salt":"The 32-byte random value used to create the contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2Clone(address,bytes)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt value `salt`, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.","params":{"data":"The initialisation code that is passed to the deployed proxy contract.","implementation":"The 20-byte implementation contract address."},"returns":{"proxy":"The 20-byte address where the clone was deployed."}},"deployCreate2Clone(bytes32,address,bytes)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt value `salt`, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.","params":{"data":"The initialisation code that is passed to the deployed proxy contract.","implementation":"The 20-byte implementation contract address.","salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"proxy":"The 20-byte address where the clone was deployed."}},"deployCreate3(bytes)":{"details":"Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"initCode":"The creation bytecode."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3(bytes32,bytes)":{"custom:security":"We strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.","details":"Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system. Furthermore, we strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the proxy contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system. Furthermore, we strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","salt":"The 32-byte random value used to create the proxy contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreateAndInit(bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreateAndInit(bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreateClone(address,bytes)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys a new EIP-1167 minimal proxy contract using the `CREATE` opcode, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.","params":{"data":"The initialisation code that is passed to the deployed proxy contract.","implementation":"The 20-byte implementation contract address."},"returns":{"proxy":"The 20-byte address where the clone was deployed."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin-contracts/=lib/interop-lib/vendor/openzeppelin-contracts/","@solady/=lib/interop-lib/lib/solady/src/","createx/=lib/createx/src/","forge-std/=lib/forge-std/src/","interop-lib/=lib/interop-lib/src/","openzeppelin/=lib/createx/lib/openzeppelin-contracts/contracts/","solady/=lib/createx/lib/solady/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/createx/src/CreateX.sol":"CreateX"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/createx/src/CreateX.sol":{"keccak256":"0x2dbac4ef907ba7193aaffb58b8e3cd2e5d212dcfbd5fd87ba83c5ac720767c35","urls":["bzz-raw://3419e91a1887f81a9c69d8fc4fb1c7ee40635e4b99328166ae15627897d077e3","dweb:/ipfs/QmPgZMLnePsddpoYufeuUK5pmAU9cdjQPvFvswpPZEaH6W"],"license":"AGPL-3.0-only"}},"version":1},"id":0}