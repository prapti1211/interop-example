{"abi":[{"type":"function","name":"__constructor__","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"crossDomainMessageContext","inputs":[],"outputs":[{"name":"sender_","type":"address","internalType":"address"},{"name":"source_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"crossDomainMessageSender","inputs":[],"outputs":[{"name":"sender_","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"crossDomainMessageSource","inputs":[],"outputs":[{"name":"source_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"messageNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"messageVersion","inputs":[],"outputs":[{"name":"","type":"uint16","internalType":"uint16"}],"stateMutability":"view"},{"type":"function","name":"relayMessage","inputs":[{"name":"_id","type":"tuple","internalType":"struct Identifier","components":[{"name":"origin","type":"address","internalType":"address"},{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"logIndex","type":"uint256","internalType":"uint256"},{"name":"timestamp","type":"uint256","internalType":"uint256"},{"name":"chainId","type":"uint256","internalType":"uint256"}]},{"name":"_sentMessage","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"returnData_","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"sendMessage","inputs":[{"name":"_destination","type":"uint256","internalType":"uint256"},{"name":"_target","type":"address","internalType":"address"},{"name":"_message","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"successfulMessages","inputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"event","name":"RelayedMessage","inputs":[{"name":"source","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"messageNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"messageHash","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SentMessage","inputs":[{"name":"destination","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"target","type":"address","indexed":true,"internalType":"address"},{"name":"messageNonce","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"sender","type":"address","indexed":false,"internalType":"address"},{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"error","name":"EventPayloadNotSentMessage","inputs":[]},{"type":"error","name":"IdOriginNotL2ToL2CrossDomainMessenger","inputs":[]},{"type":"error","name":"InvalidChainId","inputs":[]},{"type":"error","name":"MessageAlreadyRelayed","inputs":[]},{"type":"error","name":"MessageDestinationNotRelayChain","inputs":[]},{"type":"error","name":"MessageDestinationSameChain","inputs":[]},{"type":"error","name":"MessageTargetCrossL2Inbox","inputs":[]},{"type":"error","name":"MessageTargetL2ToL2CrossDomainMessenger","inputs":[]},{"type":"error","name":"NotEntered","inputs":[]},{"type":"error","name":"ReentrantCall","inputs":[]},{"type":"error","name":"TargetCallFailed","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"__constructor__()":"1c0082a3","crossDomainMessageContext()":"7936cbee","crossDomainMessageSender()":"38ffde18","crossDomainMessageSource()":"24794462","messageNonce()":"ecc70428","messageVersion()":"52617f3c","relayMessage((address,uint256,uint256,uint256,uint256),bytes)":"8d1d298f","sendMessage(uint256,address,bytes)":"7056f41f","successfulMessages(bytes32)":"b1b1b209","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EventPayloadNotSentMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdOriginNotL2ToL2CrossDomainMessenger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageAlreadyRelayed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageDestinationNotRelayChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageDestinationSameChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageTargetCrossL2Inbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageTargetL2ToL2CrossDomainMessenger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetCallFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"source\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"messageNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"SentMessage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__constructor__\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossDomainMessageContext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"source_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossDomainMessageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossDomainMessageSource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"source_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Identifier\",\"name\":\"_id\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sentMessage\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData_\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destination\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"successfulMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RelayedMessage(uint256,uint256,bytes32)\":{\"params\":{\"messageHash\":\"Hash of the message that was relayed.\",\"messageNonce\":\"Nonce associated with the messsage sent\",\"source\":\"Chain ID of the source chain.\"}},\"SentMessage(uint256,address,uint256,address,bytes)\":{\"params\":{\"destination\":\"Chain ID of the destination chain.\",\"message\":\"Message payload to call target with.\",\"messageNonce\":\"Nonce associated with the messsage sent\",\"sender\":\"Address initiating this message call\",\"target\":\"Target contract or wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"crossDomainMessageContext()\":{\"returns\":{\"sender_\":\"Address of the sender of the current cross domain message.\",\"source_\":\"Chain ID of the source of the current cross domain message.\"}},\"crossDomainMessageSender()\":{\"returns\":{\"sender_\":\"Address of the sender of the current cross domain message.\"}},\"crossDomainMessageSource()\":{\"returns\":{\"source_\":\"Chain ID of the source of the current cross domain message.\"}},\"messageNonce()\":{\"returns\":{\"_0\":\"Nonce of the next message to be sent, with added message version.\"}},\"relayMessage((address,uint256,uint256,uint256,uint256),bytes)\":{\"params\":{\"_id\":\"Identifier of the SentMessage event to be relayed\",\"_sentMessage\":\"Message payload of the `SentMessage` event\"},\"returns\":{\"returnData_\":\"Return data from the target contract call.\"}},\"sendMessage(uint256,address,bytes)\":{\"params\":{\"_destination\":\"Chain ID of the destination chain.\",\"_message\":\"Message to trigger the target address with.\",\"_target\":\"Target contract or wallet address.\"},\"returns\":{\"_0\":\"msgHash_ The hash of the message being sent, which can be used for tracking whether                  the message has successfully been relayed.\"}},\"successfulMessages(bytes32)\":{\"returns\":{\"_0\":\"Returns true if the message corresponding to the `_msgHash` was successfully relayed.\"}}},\"title\":\"IL2ToL2CrossDomainMessenger\",\"version\":1},\"userdoc\":{\"errors\":{\"EventPayloadNotSentMessage()\":[{\"notice\":\"Thrown when the payload provided to the relay is not a SentMessage event.\"}],\"IdOriginNotL2ToL2CrossDomainMessenger()\":[{\"notice\":\"Thrown when attempting to relay a message where payload origin is not L2ToL2CrossDomainMessenger.\"}],\"InvalidChainId()\":[{\"notice\":\"Thrown when attempting to use a chain ID that is not in the dependency set.\"}],\"MessageAlreadyRelayed()\":[{\"notice\":\"Thrown when attempting to relay a message that has already been relayed.\"}],\"MessageDestinationNotRelayChain()\":[{\"notice\":\"Thrown when attempting to relay a message whose destination chain is not the chain relaying it.\"}],\"MessageDestinationSameChain()\":[{\"notice\":\"Thrown when attempting to send a message to the chain that the message is being sent from.\"}],\"MessageTargetCrossL2Inbox()\":[{\"notice\":\"Thrown when attempting to relay a message whose target is CrossL2Inbox.\"}],\"MessageTargetL2ToL2CrossDomainMessenger()\":[{\"notice\":\"Thrown when attempting to relay a message whose target is L2ToL2CrossDomainMessenger.\"}],\"NotEntered()\":[{\"notice\":\"Thrown when a non-written slot in transient storage is attempted to be read from.\"}],\"ReentrantCall()\":[{\"notice\":\"Thrown when a reentrant call is detected.\"}],\"TargetCallFailed()\":[{\"notice\":\"Thrown when a call to the target contract during message relay fails.\"}]},\"events\":{\"RelayedMessage(uint256,uint256,bytes32)\":{\"notice\":\"Emitted whenever a message is successfully relayed on this chain.\"},\"SentMessage(uint256,address,uint256,address,bytes)\":{\"notice\":\"Emitted whenever a message is sent to a destination\"}},\"kind\":\"user\",\"methods\":{\"crossDomainMessageContext()\":{\"notice\":\"Retrieves the context of the current cross domain message. If not entered, reverts.\"},\"crossDomainMessageSender()\":{\"notice\":\"Retrieves the sender of the current cross domain message.\"},\"crossDomainMessageSource()\":{\"notice\":\"Retrieves the source of the current cross domain message.\"},\"messageNonce()\":{\"notice\":\"Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures.\"},\"relayMessage((address,uint256,uint256,uint256,uint256),bytes)\":{\"notice\":\"Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed.\"},\"sendMessage(uint256,address,bytes)\":{\"notice\":\"Sends a message to some target address on a destination chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function).\"},\"successfulMessages(bytes32)\":{\"notice\":\"Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again.\"}},\"notice\":\"Interface for the L2ToL2CrossDomainMessenger contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/interop-lib/src/interfaces/IL2ToL2CrossDomainMessenger.sol\":\"IL2ToL2CrossDomainMessenger\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts/=lib/interop-lib/vendor/openzeppelin-contracts/\",\":@solady/=lib/interop-lib/lib/solady/src/\",\":createx/=lib/createx/src/\",\":forge-std/=lib/forge-std/src/\",\":interop-lib/=lib/interop-lib/src/\",\":openzeppelin/=lib/createx/lib/openzeppelin-contracts/contracts/\",\":solady/=lib/createx/lib/solady/src/\"]},\"sources\":{\"lib/interop-lib/src/interfaces/IL2ToL2CrossDomainMessenger.sol\":{\"keccak256\":\"0x56ed1ac4b35b4cab3e6da0229dbee7e0838b628982e43cb1c97218cab24130e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a324fadd455edabfdd96edb8e33390dd1c0102a9b2fe0ab7e5c388593418a329\",\"dweb:/ipfs/QmaqKfn3BSEURMjW99UBoP9v32wjDTaWF2XTKmfC99tXq5\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"EventPayloadNotSentMessage"},{"inputs":[],"type":"error","name":"IdOriginNotL2ToL2CrossDomainMessenger"},{"inputs":[],"type":"error","name":"InvalidChainId"},{"inputs":[],"type":"error","name":"MessageAlreadyRelayed"},{"inputs":[],"type":"error","name":"MessageDestinationNotRelayChain"},{"inputs":[],"type":"error","name":"MessageDestinationSameChain"},{"inputs":[],"type":"error","name":"MessageTargetCrossL2Inbox"},{"inputs":[],"type":"error","name":"MessageTargetL2ToL2CrossDomainMessenger"},{"inputs":[],"type":"error","name":"NotEntered"},{"inputs":[],"type":"error","name":"ReentrantCall"},{"inputs":[],"type":"error","name":"TargetCallFailed"},{"inputs":[{"internalType":"uint256","name":"source","type":"uint256","indexed":true},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":true},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":true}],"type":"event","name":"RelayedMessage","anonymous":false},{"inputs":[{"internalType":"uint256","name":"destination","type":"uint256","indexed":true},{"internalType":"address","name":"target","type":"address","indexed":true},{"internalType":"uint256","name":"messageNonce","type":"uint256","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":false},{"internalType":"bytes","name":"message","type":"bytes","indexed":false}],"type":"event","name":"SentMessage","anonymous":false},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"__constructor__"},{"inputs":[],"stateMutability":"view","type":"function","name":"crossDomainMessageContext","outputs":[{"internalType":"address","name":"sender_","type":"address"},{"internalType":"uint256","name":"source_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"crossDomainMessageSender","outputs":[{"internalType":"address","name":"sender_","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"crossDomainMessageSource","outputs":[{"internalType":"uint256","name":"source_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"messageNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"messageVersion","outputs":[{"internalType":"uint16","name":"","type":"uint16"}]},{"inputs":[{"internalType":"struct Identifier","name":"_id","type":"tuple","components":[{"internalType":"address","name":"origin","type":"address"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"logIndex","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"chainId","type":"uint256"}]},{"internalType":"bytes","name":"_sentMessage","type":"bytes"}],"stateMutability":"payable","type":"function","name":"relayMessage","outputs":[{"internalType":"bytes","name":"returnData_","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"_destination","type":"uint256"},{"internalType":"address","name":"_target","type":"address"},{"internalType":"bytes","name":"_message","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessage","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"successfulMessages","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"crossDomainMessageContext()":{"returns":{"sender_":"Address of the sender of the current cross domain message.","source_":"Chain ID of the source of the current cross domain message."}},"crossDomainMessageSender()":{"returns":{"sender_":"Address of the sender of the current cross domain message."}},"crossDomainMessageSource()":{"returns":{"source_":"Chain ID of the source of the current cross domain message."}},"messageNonce()":{"returns":{"_0":"Nonce of the next message to be sent, with added message version."}},"relayMessage((address,uint256,uint256,uint256,uint256),bytes)":{"params":{"_id":"Identifier of the SentMessage event to be relayed","_sentMessage":"Message payload of the `SentMessage` event"},"returns":{"returnData_":"Return data from the target contract call."}},"sendMessage(uint256,address,bytes)":{"params":{"_destination":"Chain ID of the destination chain.","_message":"Message to trigger the target address with.","_target":"Target contract or wallet address."},"returns":{"_0":"msgHash_ The hash of the message being sent, which can be used for tracking whether                  the message has successfully been relayed."}},"successfulMessages(bytes32)":{"returns":{"_0":"Returns true if the message corresponding to the `_msgHash` was successfully relayed."}}},"version":1},"userdoc":{"kind":"user","methods":{"crossDomainMessageContext()":{"notice":"Retrieves the context of the current cross domain message. If not entered, reverts."},"crossDomainMessageSender()":{"notice":"Retrieves the sender of the current cross domain message."},"crossDomainMessageSource()":{"notice":"Retrieves the source of the current cross domain message."},"messageNonce()":{"notice":"Retrieves the next message nonce. Message version will be added to the upper two         bytes of the message nonce. Message version allows us to treat messages as having         different structures."},"relayMessage((address,uint256,uint256,uint256,uint256),bytes)":{"notice":"Relays a message that was sent by the other CrossDomainMessenger contract. Can only         be executed via cross-chain call from the other messenger OR if the message was         already received once and is currently being replayed."},"sendMessage(uint256,address,bytes)":{"notice":"Sends a message to some target address on a destination chain. Note that if the call         always reverts, then the message will be unrelayable, and any ETH sent will be         permanently locked. The same will occur if the target on the other chain is         considered unsafe (see the _isUnsafeTarget() function)."},"successfulMessages(bytes32)":{"notice":"Mapping of message hashes to boolean receipt values. Note that a message will only         be present in this mapping if it has successfully been relayed on this chain, and         can therefore not be relayed again."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts/=lib/interop-lib/vendor/openzeppelin-contracts/","@solady/=lib/interop-lib/lib/solady/src/","createx/=lib/createx/src/","forge-std/=lib/forge-std/src/","interop-lib/=lib/interop-lib/src/","openzeppelin/=lib/createx/lib/openzeppelin-contracts/contracts/","solady/=lib/createx/lib/solady/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/interop-lib/src/interfaces/IL2ToL2CrossDomainMessenger.sol":"IL2ToL2CrossDomainMessenger"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/interop-lib/src/interfaces/IL2ToL2CrossDomainMessenger.sol":{"keccak256":"0x56ed1ac4b35b4cab3e6da0229dbee7e0838b628982e43cb1c97218cab24130e0","urls":["bzz-raw://a324fadd455edabfdd96edb8e33390dd1c0102a9b2fe0ab7e5c388593418a329","dweb:/ipfs/QmaqKfn3BSEURMjW99UBoP9v32wjDTaWF2XTKmfC99tXq5"],"license":"MIT"}},"version":1},"id":15}